import {
  UAParser
} from "./chunk-XXTABPKT.js";
import "./chunk-EWTE5DHJ.js";

// node_modules/ua-parser-js/src/enums/ua-parser-enums.mjs
var Browser = Object.freeze({
  "115": "115",
  "2345": "2345",
  "360": "360",
  ALIPAY: "Alipay",
  AMAYA: "Amaya",
  ANDROID: "Android Browser",
  ARORA: "Arora",
  AVANT: "Avant",
  AVAST: "Avast Secure Browser",
  AVG: "AVG Secure Browser",
  BAIDU: "Baidu Browser",
  BASILISK: "Basilisk",
  BLAZER: "Blazer",
  BLU: "BLU",
  BOLT: "Bolt",
  BOWSER: "Bowser",
  BRAVE: "Brave",
  CAMINO: "Camino",
  CHIMERA: "Chimera",
  CHROME: "Chrome",
  CHROME_HEADLESS: "Chrome Headless",
  CHROME_MOBILE: "Mobile Chrome",
  CHROME_WEBVIEW: "Chrome WebView",
  CHROMIUM: "Chromium",
  COBALT: "Cobalt",
  COC_COC: "Coc Coc",
  CONKEROR: "Conkeror",
  DAUM: "Daum",
  DILLO: "Dillo",
  DOLPHIN: "Dolphin",
  DOOBLE: "Dooble",
  DORIS: "Doris",
  DRAGON: "Dragon",
  DUCKDUCKGO: "DuckDuckGo",
  ECOSIA: "Ecosia",
  EDGE: "Edge",
  EPIPHANY: "Epiphany",
  FACEBOOK: "Facebook",
  FALKON: "Falkon",
  FIREBIRD: "Firebird",
  FIREFOX: "Firefox",
  FIREFOX_FOCUS: "Firefox Focus",
  FIREFOX_MOBILE: "Mobile Firefox",
  FIREFOX_REALITY: "Firefox Reality",
  FENNEC: "Fennec",
  FLOCK: "Flock",
  FLOW: "Flow",
  GO: "GoBrowser",
  GOOGLE_SEARCH: "GSA",
  HELIO: "Helio",
  HEYTAP: "HeyTap",
  HONOR: "Honor",
  HUAWEI: "Huawei Browser",
  ICAB: "iCab",
  ICE: "ICE Browser",
  ICEAPE: "IceApe",
  ICECAT: "IceCat",
  ICEDRAGON: "IceDragon",
  ICEWEASEL: "IceWeasel",
  IE: "IE",
  INSTAGRAM: "Instagram",
  IRIDIUM: "Iridium",
  IRON: "Iron",
  JASMINE: "Jasmine",
  KONQUEROR: "Konqueror",
  KAKAO: "KakaoTalk",
  KHTML: "KHTML",
  K_MELEON: "K-Meleon",
  KLAR: "Klar",
  KLARNA: "Klarna",
  KINDLE: "Kindle",
  LENOVO: "Smart Lenovo Browser",
  LADYBIRD: "Ladybird",
  LG: "LG Browser",
  LIBREWOLF: "LibreWolf",
  LIEBAO: "LBBROWSER",
  LINE: "Line",
  LINKEDIN: "LinkedIn",
  LINKS: "Links",
  LUNASCAPE: "Lunascape",
  LYNX: "Lynx",
  MAEMO: "Maemo Browser",
  MAXTHON: "Maxthon",
  MIDORI: "Midori",
  MINIMO: "Minimo",
  MIUI: "MIUI Browser",
  MOZILLA: "Mozilla",
  MOSAIC: "Mosaic",
  NAVER: "Naver",
  NETFRONT: "NetFront",
  NETSCAPE: "Netscape",
  NETSURF: "Netsurf",
  NOKIA: "Nokia Browser",
  OBIGO: "Obigo",
  OCULUS: "Oculus Browser",
  OMNIWEB: "OmniWeb",
  OPERA: "Opera",
  OPERA_COAST: "Opera Coast",
  OPERA_GX: "Opera GX",
  OPERA_MINI: "Opera Mini",
  OPERA_MOBI: "Opera Mobi",
  OPERA_TABLET: "Opera Tablet",
  OPERA_TOUCH: "Opera Touch",
  OTTER: "Otter",
  OVI: "OviBrowser",
  PALEMOON: "PaleMoon",
  PHANTOMJS: "PhantomJS",
  PHOENIX: "Phoenix",
  PICOBROWSER: "Pico Browser",
  POLARIS: "Polaris",
  PUFFIN: "Puffin",
  QQ: "QQBrowser",
  QQ_LITE: "QQBrowserLite",
  QUARK: "Quark",
  QUPZILLA: "QupZilla",
  QUTEBROWSER: "qutebrowser",
  REKONQ: "rekonq",
  ROCKMELT: "Rockmelt",
  SAFARI: "Safari",
  SAFARI_MOBILE: "Mobile Safari",
  SAILFISH: "Sailfish Browser",
  SAMSUNG: "Samsung Internet",
  SEAMONKEY: "SeaMonkey",
  SILK: "Silk",
  SKYFIRE: "Skyfire",
  SLEIPNIR: "Sleipnir",
  SLIMBOAT: "SlimBoat",
  SLIMBROWSER: "SlimBrowser",
  SLIMJET: "Slimjet",
  SNAPCHAT: "Snapchat",
  SOGOU_EXPLORER: "Sogou Explorer",
  SOGOU_MOBILE: "Sogou Mobile",
  SURF: "Surf",
  SWIFTFOX: "Swiftfox",
  TESLA: "Tesla",
  TIKTOK: "TikTok",
  TIZEN: "Tizen Browser",
  TWITTER: "Twitter",
  UC: "UCBrowser",
  UP: "UP.Browser",
  VIVALDI: "Vivaldi",
  VIVO: "Vivo Browser",
  W3M: "w3m",
  WATERFOX: "Waterfox",
  WEBKIT: "WebKit",
  WECHAT: "WeChat",
  WEIBO: "Weibo",
  WHALE: "Whale",
  WOLVIC: "Wolvic",
  YANDEX: "Yandex"
  // TODO : test!
});
var BrowserType = Object.freeze({
  CRAWLER: "crawler",
  CLI: "cli",
  EMAIL: "email",
  FETCHER: "fetcher",
  INAPP: "inapp",
  MEDIAPLAYER: "mediaplayer",
  LIBRARY: "library"
});
var CPU = Object.freeze({
  "68K": "68k",
  ARM: "arm",
  ARM_64: "arm64",
  ARM_HF: "armhf",
  AVR: "avr",
  AVR_32: "avr32",
  IA64: "ia64",
  IRIX: "irix",
  IRIX_64: "irix64",
  MIPS: "mips",
  MIPS_64: "mips64",
  PA_RISC: "pa-risc",
  PPC: "ppc",
  SPARC: "sparc",
  SPARC_64: "sparc64",
  X86: "ia32",
  X86_64: "amd64"
});
var Device = Object.freeze({
  CONSOLE: "console",
  DESKTOP: "desktop",
  EMBEDDED: "embedded",
  MOBILE: "mobile",
  SMARTTV: "smarttv",
  TABLET: "tablet",
  WEARABLE: "wearable",
  XR: "xr"
});
var Vendor = Object.freeze({
  ACER: "Acer",
  ADVAN: "Advan",
  ALCATEL: "Alcatel",
  APPLE: "Apple",
  AMAZON: "Amazon",
  ARCHOS: "Archos",
  ASUS: "ASUS",
  ATT: "AT&T",
  BENQ: "BenQ",
  BLACKBERRY: "BlackBerry",
  CAT: "Cat",
  DELL: "Dell",
  ENERGIZER: "Energizer",
  ESSENTIAL: "Essential",
  FACEBOOK: "Facebook",
  FAIRPHONE: "Fairphone",
  GEEKSPHONE: "GeeksPhone",
  GENERIC: "Generic",
  GOOGLE: "Google",
  HMD: "HMD",
  HP: "HP",
  HTC: "HTC",
  HUAWEI: "Huawei",
  IMO: "IMO",
  INFINIX: "Infinix",
  ITEL: "itel",
  JOLLA: "Jolla",
  KOBO: "Kobo",
  LENOVO: "Lenovo",
  LG: "LG",
  MEIZU: "Meizu",
  MICROMAX: "Micromax",
  MICROSOFT: "Microsoft",
  MOTOROLA: "Motorola",
  NEXIAN: "Nexian",
  NINTENDO: "Nintendo",
  NOKIA: "Nokia",
  NOTHING: "Nothing",
  NVIDIA: "Nvidia",
  ONEPLUS: "OnePlus",
  OPPO: "OPPO",
  OUYA: "Ouya",
  PALM: "Palm",
  PANASONIC: "Panasonic",
  PEBBLE: "Pebble",
  PICO: "Pico",
  POLYTRON: "Polytron",
  REALME: "Realme",
  RIM: "RIM",
  ROKU: "Roku",
  SAMSUNG: "Samsung",
  SHARP: "Sharp",
  SIEMENS: "Siemens",
  SMARTFREN: "Smartfren",
  SONY: "Sony",
  SPRINT: "Sprint",
  TCL: "TCL",
  TECHNISAT: "TechniSAT",
  TECNO: "Tecno",
  TESLA: "Tesla",
  ULEFONE: "Ulefone",
  VIVO: "Vivo",
  VODAFONE: "Vodafone",
  XBOX: "Xbox",
  XIAOMI: "Xiaomi",
  ZEBRA: "Zebra",
  ZTE: "ZTE"
  // TODO : test!
});
var Engine = Object.freeze({
  AMAYA: "Amaya",
  ARKWEB: "ArkWeb",
  BLINK: "Blink",
  EDGEHTML: "EdgeHTML",
  FLOW: "Flow",
  GECKO: "Gecko",
  GOANNA: "Goanna",
  ICAB: "iCab",
  KHTML: "KHTML",
  LIBWEB: "LibWeb",
  LINKS: "Links",
  LYNX: "Lynx",
  NETFRONT: "NetFront",
  NETSURF: "NetSurf",
  PRESTO: "Presto",
  SERVO: "Servo",
  TASMAN: "Tasman",
  TRIDENT: "Trident",
  W3M: "w3m",
  WEBKIT: "WebKit"
});
var OS = Object.freeze({
  AIX: "AIX",
  AMIGA_OS: "Amiga OS",
  ANDROID: "Android",
  ANDROID_X86: "Android-x86",
  ARCH: "Arch",
  BADA: "Bada",
  BEOS: "BeOS",
  BLACKBERRY: "BlackBerry",
  CENTOS: "CentOS",
  CHROME_OS: "Chrome OS",
  CHROMECAST: "Chromecast",
  CHROMECAST_ANDROID: "Chromecast Android",
  CHROMECAST_FUCHSIA: "Chromecast Fuchsia",
  CHROMECAST_LINUX: "Chromecast Linux",
  CHROMECAST_SMARTSPEAKER: "Chromecast SmartSpeaker",
  CONTIKI: "Contiki",
  DEBIAN: "Debian",
  DEEPIN: "Deepin",
  DRAGONFLY: "DragonFly",
  ELEMENTARY_OS: "elementary OS",
  FEDORA: "Fedora",
  FIREFOX_OS: "Firefox OS",
  FREEBSD: "FreeBSD",
  FUCHSIA: "Fuchsia",
  GENTOO: "Gentoo",
  GHOSTBSD: "GhostBSD",
  GNU: "GNU",
  HAIKU: "Haiku",
  HARMONYOS: "HarmonyOS",
  HP_UX: "HP-UX",
  HURD: "Hurd",
  IOS: "iOS",
  JOLI: "Joli",
  KAIOS: "KaiOS",
  KUBUNTU: "Kubuntu",
  LINPUS: "Linpus",
  LINSPIRE: "Linspire",
  LINUX: "Linux",
  MACOS: "macOS",
  MAEMO: "Maemo",
  MAGEIA: "Mageia",
  MANDRIVA: "Mandriva",
  MANJARO: "Manjaro",
  MEEGO: "MeeGo",
  MINIX: "Minix",
  MINT: "Mint",
  MORPH_OS: "Morph OS",
  NETBSD: "NetBSD",
  NETRANGE: "NetRange",
  NETTV: "NetTV",
  NINTENDO: "Nintendo",
  OPENHARMONY: "OpenHarmony",
  OPENBSD: "OpenBSD",
  OPENVMS: "OpenVMS",
  OS2: "OS/2",
  PALM: "Palm",
  PC_BSD: "PC-BSD",
  PCLINUXOS: "PCLinuxOS",
  PICO: "Pico",
  PLAN9: "Plan9",
  PLAYSTATION: "PlayStation",
  QNX: "QNX",
  RASPBIAN: "Raspbian",
  REDHAT: "RedHat",
  RIM_TABLET_OS: "RIM Tablet OS",
  RISC_OS: "RISC OS",
  SABAYON: "Sabayon",
  SAILFISH: "Sailfish",
  SERENITYOS: "SerenityOS",
  SERIES40: "Series40",
  SLACKWARE: "Slackware",
  SOLARIS: "Solaris",
  SUSE: "SUSE",
  SYMBIAN: "Symbian",
  TIZEN: "Tizen",
  UBUNTU: "Ubuntu",
  UBUNTU_TOUCH: "Ubuntu Touch",
  UNIX: "Unix",
  VECTORLINUX: "VectorLinux",
  WATCHOS: "watchOS",
  WEBOS: "WebOS",
  WINDOWS: "Windows",
  WINDOWS_IOT: "Windows IoT",
  WINDOWS_MOBILE: "Windows Mobile",
  WINDOWS_PHONE: "Windows Phone",
  XBOX: "Xbox",
  ZENWALK: "Zenwalk"
  // TODO : test!
});

// node_modules/ua-parser-js/src/extensions/ua-parser-extensions.mjs
var MODEL = "model";
var NAME = "name";
var TYPE = "type";
var VENDOR = "vendor";
var VERSION = "version";
var MOBILE = "mobile";
var TABLET = "tablet";
var CRAWLER = "crawler";
var CLI = "cli";
var EMAIL = "email";
var FETCHER = "fetcher";
var INAPP = "inapp";
var MEDIAPLAYER = "mediaplayer";
var LIBRARY = "library";
var CLIs = Object.freeze({
  browser: [
    // wget / curl / Lynx / ELinks / HTTPie
    [/(wget|curl|lynx|elinks|httpie)[\/ ]\(?([\w\.-]+)/i],
    [NAME, VERSION, [TYPE, CLI]]
  ]
});
var Crawlers = Object.freeze({
  browser: [
    [
      // AhrefsBot - https://ahrefs.com/robot
      // Amazonbot - https://developer.amazon.com/amazonbot
      // Bingbot / AdIdxBot - https://www.bing.com/webmasters/help/which-crawlers-does-bing-use-8c184ec0
      // CCBot - https://commoncrawl.org/faq
      // Dotbot - https://moz.com/help/moz-procedures/crawlers/dotbot
      // DuckDuckBot - http://duckduckgo.com/duckduckbot.html
      // FacebookBot - https://developers.facebook.com/docs/sharing/bot/
      // GPTBot - https://platform.openai.com/docs/gptbot
      // LinkedInBot - http://www.linkedin.com
      // MJ12bot - https://mj12bot.com/
      // MojeekBot - https://www.mojeek.com/bot.html
      // OpenAI's SearchGPT - https://platform.openai.com/docs/bots
      // PerplexityBot - https://perplexity.ai/perplexitybot
      // SeznamBot - http://napoveda.seznam.cz/seznambot-intro
      /((?:adidx|ahrefs|amazon|bing|cc|dot|duckduck|exa|facebook|gpt|linkedin|mj12|mojeek|oai-search|perplexity|semrush|seznam)bot)\/([\w\.-]+)/i,
      // Applebot - http://apple.com/go/applebot
      /(applebot(?:-extended)?)\/?([\w\.]*)/i,
      // Baiduspider https://help.baidu.com/question?prod_id=99&class=0&id=3001
      /(baiduspider[-imagevdonwsfcpr]{0,7})\/?([\w\.]*)/i,
      // ClaudeBot (Anthropic)
      /(claude(?:bot|-web)|anthropic-ai)\/?([\w\.]*)/i,
      // Coc Coc Bot - https://help.coccoc.com/en/search-engine
      /(coccocbot-(?:image|web))\/([\w\.]+)/i,
      // Facebook / Meta 
      // https://developers.facebook.com/docs/sharing/webmasters/web-crawlers
      /(facebook(?:externalhit|catalog)|meta-externalagent)\/([\w\.]+)/i,
      // Googlebot - http://www.google.com/bot.html
      /(google(?:bot|other|-inspectiontool)(?:-image|-video|-news)?|storebot-google)\/?([\w\.]*)/i,
      // Internet Archive (archive.org)
      /(ia_archiver|archive\.org_bot)\/?([\w\.]*)/i,
      // SemrushBot - http://www.semrush.com/bot.html
      /((?:semrush|splitsignal)bot[-abcfimostw]*)\/?([\w\.-]*)/i,
      // Sogou Spider
      /(sogou (?:pic|head|web|orion|news) spider)\/([\w\.]+)/i,
      // Yahoo! Japan - https://support.yahoo-net.jp/PccSearch/s/article/H000007955
      /(y!?j-(?:asr|br[uw]|dscv|mmp|vsidx|wsc))\/([\w\.]+)/i,
      // Yandex Bots - https://yandex.com/bots
      /(yandex(?:(?:mobile)?(?:accessibility|additional|renderresources|screenshot|sprav)?bot|image(?:s|resizer)|video(?:parser)?|blogs|adnet|favicons|fordomain|market|media|metrika|news|ontodb(?:api)?|pagechecker|partner|rca|tracker|turbo|vertis|webmaster|antivirus))\/([\w\.]+)/i,
      // Yeti (Naver)
      /(yeti)\/([\w\.]+)/i,
      // aiHitBot / Diffbot / Linespider / Magpie-Crawler / Omgilibot / OpenAI Image Downloader / Webzio-Extended / Screaming Frog SEO Spider / Timpibot / VelenPublicWebCrawler / YisouSpider / YouBot
      /((?:aihit|diff|timpi|you)bot|omgili(?:bot)?|openai image downloader|(?:magpie-|velenpublicweb)crawler|webzio-extended|(?:screaming frog seo |line|yisou)spider)\/?([\w\.]*)/i
    ],
    [NAME, VERSION, [TYPE, CRAWLER]],
    [
      // Google Bots
      /((?:adsbot|apis|mediapartners)-google(?:-mobile)?|google-?(?:other|cloudvertexbot|extended|safety))/i,
      // AI2Bot - https://allenai.org/crawler
      // Bytespider
      // DataForSeoBot - https://dataforseo.com/dataforseo-bot
      // Huawei AspiegelBot / PetalBot https://aspiegel.com/petalbot
      // ImagesiftBot - https://imagesift.com/about
      // Qihoo 360Spider
      // TurnitinBot - https://www.turnitin.com/robot/crawlerinfo.html
      // Yahoo! Slurp - http://help.yahoo.com/help/us/ysearch/slurp
      /\b(360spider-?(?:image|video)?|bytespider|(?:ai2|aspiegel|dataforseo|imagesift|petal|turnitin)bot|teoma|yahoo! slurp)/i
    ],
    [NAME, [TYPE, CRAWLER]]
  ]
});
var ExtraDevices = Object.freeze({
  device: [
    [
      /(nook)[\w ]+build\/(\w+)/i,
      // Nook
      /(dell) (strea[kpr\d ]*[\dko])/i,
      // Dell Streak
      /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
      // Le Pan Tablets
      /(trinity)[- ]*(t\d{3}) bui/i,
      // Trinity Tablets
      /(gigaset)[- ]+(q\w{1,9}) bui/i,
      // Gigaset Tablets
      /(vodafone) ([\w ]+)(?:\)| bui)/i
      // Vodafone
    ],
    [VENDOR, MODEL, [TYPE, TABLET]],
    [
      /(u304aa)/i
      // AT&T
    ],
    [MODEL, [VENDOR, "AT&T"], [TYPE, MOBILE]],
    [
      /\bsie-(\w*)/i
      // Siemens
    ],
    [MODEL, [VENDOR, "Siemens"], [TYPE, MOBILE]],
    [
      /\b(rct\w+) b/i
      // RCA Tablets
    ],
    [MODEL, [VENDOR, "RCA"], [TYPE, TABLET]],
    [
      /\b(venue[\d ]{2,7}) b/i
      // Dell Venue Tablets
    ],
    [MODEL, [VENDOR, "Dell"], [TYPE, TABLET]],
    [
      /\b(q(?:mv|ta)\w+) b/i
      // Verizon Tablet
    ],
    [MODEL, [VENDOR, "Verizon"], [TYPE, TABLET]],
    [
      /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i
      // Barnes & Noble Tablet
    ],
    [MODEL, [VENDOR, "Barnes & Noble"], [TYPE, TABLET]],
    [
      /\b(tm\d{3}\w+) b/i
    ],
    [MODEL, [VENDOR, "NuVision"], [TYPE, TABLET]],
    [
      /\b(k88) b/i
      // ZTE K Series Tablet
    ],
    [MODEL, [VENDOR, "ZTE"], [TYPE, TABLET]],
    [
      /\b(nx\d{3}j) b/i
      // ZTE Nubia
    ],
    [MODEL, [VENDOR, "ZTE"], [TYPE, MOBILE]],
    [
      /\b(gen\d{3}) b.+49h/i
      // Swiss GEN Mobile
    ],
    [MODEL, [VENDOR, "Swiss"], [TYPE, MOBILE]],
    [
      /\b(zur\d{3}) b/i
      // Swiss ZUR Tablet
    ],
    [MODEL, [VENDOR, "Swiss"], [TYPE, TABLET]],
    [
      /^((zeki)?tb.*\b) b/i
      // Zeki Tablets
    ],
    [MODEL, [VENDOR, "Zeki"], [TYPE, TABLET]],
    [
      /\b([yr]\d{2}) b/i,
      /\b(?:dragon[- ]+touch |dt)(\w{5}) b/i
      // Dragon Touch Tablet
    ],
    [MODEL, [VENDOR, "Dragon Touch"], [TYPE, TABLET]],
    [
      /\b(ns-?\w{0,9}) b/i
      // Insignia Tablets
    ],
    [MODEL, [VENDOR, "Insignia"], [TYPE, TABLET]],
    [
      /\b((nxa|next)-?\w{0,9}) b/i
      // NextBook Tablets
    ],
    [MODEL, [VENDOR, "NextBook"], [TYPE, TABLET]],
    [
      /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i
      // Voice Xtreme Phones
    ],
    [[VENDOR, "Voice"], MODEL, [TYPE, MOBILE]],
    [
      /\b(lvtel\-)?(v1[12]) b/i
      // LvTel Phones
    ],
    [[VENDOR, "LvTel"], MODEL, [TYPE, MOBILE]],
    [
      /\b(ph-1) /i
      // Essential PH-1
    ],
    [MODEL, [VENDOR, "Essential"], [TYPE, MOBILE]],
    [
      /\b(v(100md|700na|7011|917g).*\b) b/i
      // Envizen Tablets
    ],
    [MODEL, [VENDOR, "Envizen"], [TYPE, TABLET]],
    [
      /\b(trio[-\w\. ]+) b/i
      // MachSpeed Tablets
    ],
    [MODEL, [VENDOR, "MachSpeed"], [TYPE, TABLET]],
    [
      /\btu_(1491) b/i
      // Rotor Tablets
    ],
    [MODEL, [VENDOR, "Rotor"], [TYPE, TABLET]]
  ]
});
var Emails = Object.freeze({
  browser: [
    [
      // Evolution / Kontact/KMail / [Microsoft/Mac] Outlook / Thunderbird
      /(airmail|bluemail|emclient|evolution|foxmail|kmail2?|kontact|(?:microsoft |mac)?outlook(?:-express)?|navermailapp|(?!chrom.+)sparrow|thunderbird|yahoo)(?:m.+ail; |[\/ ])([\w\.]+)/i
    ],
    [NAME, VERSION, [TYPE, EMAIL]]
  ]
});
var Fetchers = Object.freeze({
  browser: [
    [
      // AhrefsSiteAudit - https://ahrefs.com/robot/site-audit
      // ChatGPT-User - https://platform.openai.com/docs/plugins/bot
      // DuckAssistBot - https://duckduckgo.com/duckassistbot/
      // Better Uptime / BingPreview / Mastodon / MicrosoftPreview / Pinterestbot / Redditbot / Rogerbot / SiteAuditBot / Telegrambot / Twitterbot / UptimeRobot
      // Google Site Verifier / Meta / Yahoo! Japan
      // Yandex Bots - https://yandex.com/bots
      /(ahrefssiteaudit|(?:bing|microsoft)preview|chatgpt-user|mastodon|(?:discord|duckassist|linkedin|pinterest|reddit|roger|siteaudit|twitter|uptimero)bot|google-site-verification|meta-externalfetcher|y!?j-dlc|yandex(?:calendar|direct(?:dyn)?|searchshop)|yadirectfetcher)\/([\w\.]+)/i,
      // Bluesky
      /(bluesky) cardyb\/([\w\.]+)/i,
      // Skype
      /(skypeuripreview) preview\/([\w\.]+)/i,
      // Slackbot - https://api.slack.com/robots
      /(slack(?:bot)?(?:-imgproxy|-linkexpanding)?) ([\w\.]+)/i,
      // WhatsApp
      /(whatsapp)\/([\w\.]+)/i
    ],
    [NAME, VERSION, [TYPE, FETCHER]],
    [
      // Google Bots / Cohere / Snapchat / Vercelbot / Yandex Bots
      /((?:better uptime |telegram|vercel)bot|cohere-ai|feedfetcher-google|google(?:imageproxy|-read-aloud|-pagerenderer|producer)|snap url preview|yandex(?:sitelinks|userproxy))/i
    ],
    [NAME, [TYPE, FETCHER]]
  ],
  os: [
    [/whatsapp\/[\d\.]+ (a|i)/i],
    [[NAME, (os) => os == "A" ? "Android" : "iOS"]]
  ]
});
var InApps = Object.freeze({
  browser: [
    // Slack
    [/(?:slack(?=.+electron|.+ios)|chatlyio)\/([\d\.]+)/i],
    [VERSION, [NAME, "Slack"], [TYPE, INAPP]],
    // Yahoo! Japan
    [/jp\.co\.yahoo\.(?:android\.yjtop|ipn\.appli)\/([\d\.]+)/i],
    [VERSION, [NAME, "Yahoo! Japan"], [TYPE, INAPP]]
  ]
});
var MediaPlayers = Object.freeze({
  browser: [
    [
      /(apple(?:coremedia|tv))\/([\w\._]+)/i,
      // Generic Apple CoreMedia
      /(coremedia) v([\w\._]+)/i,
      // Ares/Nexplayer/OSSProxy
      /(ares|clementine|music player daemon|nexplayer|ossproxy) ([\w\.-]+)/i,
      // Aqualung/Lyssna/BSPlayer/Clementine/MPD
      // Audacious/AudiMusicStream/Amarok/BASS/OpenCORE/GnomeMplayer/MoC
      // NSPlayer/PSP-InternetRadioPlayer/Videos
      // Nero Home/Nero Scout/Nokia
      // QuickTime/RealMedia/RadioApp/RadioClientApplication/
      // SoundTap/Totem/Stagefright/Streamium
      // XBMC/gvfs/Xine/XMMS/irapp
      /^(aqualung|audacious|audimusicstream|amarok|bass|bsplayer|core|gnomemplayer|gvfs|irapp|lyssna|music on console|nero (?:home|scout)|nokia\d+|nsplayer|psp-internetradioplayer|quicktime|rma|radioapp|radioclientapplication|soundtap|stagefright|streamium|totem|videos|xbmc|xine|xmms)\/([\w\.-]+)/i,
      /(lg player|nexplayer) ([\d\.]+)/i,
      /player\/(nexplayer|lg player) ([\w\.-]+)/i,
      // NexPlayer/LG Player
      /(gstreamer) souphttpsrc.+libsoup\/([\w\.-]+)/i,
      // Gstreamer
      /(htc streaming player) [\w_]+ \/ ([\d\.]+)/i,
      // HTC Streaming Player
      /(lavf)([\d\.]+)/i,
      // Lavf (FFMPEG)
      // MPlayer SVN
      /(mplayer)(?: |\/)(?:(?:sherpya-){0,1}svn)(?:-| )(r\d+(?:-\d+[\w\.-]+))/i,
      / (songbird)\/([\w\.-]+)/i,
      // Songbird/Philips-Songbird
      /(winamp)(?:3 version|mpeg| ) ([\w\.-]+)/i,
      // Winamp
      /(vlc)(?:\/| media player - version )([\w\.-]+)/i,
      // VLC Videolan
      /^(foobar2000|itunes|smp)\/([\d\.]+)/i,
      // Foobar2000/iTunes/SMP
      /com\.(riseupradioalarm)\/([\d\.]*)/i,
      // RiseUP Radio Alarm
      /(mplayer)(?:\s|\/| unknown-)([\w\.\-]+)/i,
      // MPlayer
      // Windows Media Server
      /(windows)\/([\w\.-]+) upnp\/[\d\.]+ dlnadoc\/[\d\.]+ home media server/i
    ],
    [NAME, VERSION, [TYPE, MEDIAPLAYER]],
    [
      /(flrp)\/([\w\.-]+)/i
      // Flip Player
    ],
    [[NAME, "Flip Player"], VERSION, [TYPE, MEDIAPLAYER]],
    [
      // FStream/NativeHost/QuerySeekSpider
      // MPlayer (no other info)/Media Player Classic/Nero ShowTime
      // OCMS-bot/tap in radio/tunein/unknown/winamp (no other info)
      // inlight radio / YourMuze
      /(fstream|media player classic|inlight radio|mplayer|nativehost|nero showtime|ocms-bot|queryseekspider|tapinradio|tunein radio|winamp|yourmuze)/i
    ],
    [NAME, [TYPE, MEDIAPLAYER]],
    [
      /(htc_one_s|windows-media-player|wmplayer)\/([\w\.-]+)/i
      // HTC One S / Windows Media Player
    ],
    [[NAME, /[_-]/g, " "], VERSION, [TYPE, MEDIAPLAYER]],
    [
      /(rad.io|radio.(?:de|at|fr)) ([\d\.]+)/i
      // Rad.io
    ],
    [[NAME, "rad.io"], VERSION, [TYPE, MEDIAPLAYER]]
  ]
});
var Libraries = Object.freeze({
  browser: [
    // Apache-HttpClient/Axios/go-http-client/got/GuzzleHttp/Java[-HttpClient]/jsdom/libwww-perl/lua-resty-http/Needle/node-fetch/OkHttp/PHP-SOAP/PostmanRuntime/python-urllib/python-requests/Scrapy/superagent
    [
      /^(apache-httpclient|axios|(?:go|java)-http-client|got|guzzlehttp|java|libwww-perl|lua-resty-http|needle|node-(?:fetch|superagent)|okhttp|php-soap|postmanruntime|python-(?:urllib|requests)|scrapy)\/([\w\.]+)/i,
      new RegExp("(jsdom|(?<=\\()java)\\/([\\w\\.]+)", "i")
    ],
    [NAME, VERSION, [TYPE, LIBRARY]]
  ]
});
var Vehicles = Object.freeze({
  device: [
    [/aftlbt962e2/i],
    // BMW
    [[VENDOR, "BMW"]],
    [/dilink.+(byd) auto/i],
    // BYD
    [VENDOR],
    [/aftlft962x3/i],
    // Jeep
    [[VENDOR, "Jeep"], [MODEL, "Wagooner"]],
    [/(rivian) (r1t)/i],
    // Rivian
    [VENDOR, MODEL],
    [/vcc.+netfront/i],
    // Volvo
    [[VENDOR, "Volvo"]]
  ]
});
var Bots = Object.freeze({
  browser: [
    ...CLIs.browser,
    ...Crawlers.browser,
    ...Fetchers.browser,
    ...Libraries.browser
  ],
  os: [
    ...Fetchers.os
  ]
});

// node_modules/detect-europe-js/dist/esm/index.js
var TIMEZONE = {
  ANDORRA: {
    ANDORRA: "Europe/Andorra"
  },
  AUSTRIA: {
    VIENNA: "Europe/Vienna"
  },
  BELGIUM: {
    BRUSSELS: "Europe/Brussels"
  },
  BULGARIA: {
    SOFIA: "Europe/Sofia"
  },
  CROATIA: {
    ZAGREB: "Europe/Zagreb"
  },
  CYPRUS: {
    NICOSIA_EUROPE: "Europe/Nicosia",
    NICOSIA_ASIA: "Asia/Nicosia",
    FAMAGUSTA: "Asia/Famagusta"
  },
  CZECHIA: {
    PRAGUE: "Europe/Prague"
  },
  DENMARK: {
    COPENHAGEN: "Europe/Copenhagen",
    FAROE: "Atlantic/Faroe"
  },
  ESTONIA: {
    TALLINN: "Europe/Tallinn"
  },
  FINLAND: {
    HELSINKI: "Europe/Helsinki",
    MARIEHAMN: "Europe/Mariehamn"
  },
  FRANCE: {
    PARIS: "Europe/Paris",
    CAYENNE: "America/Cayenne",
    GUADELOUPE: "America/Guadeloupe",
    MARIGOT: "America/Marigot",
    MARTINIQUE: "America/Martinique",
    MAYOTTE: "Indian/Mayotte",
    REUNION: "Indian/Reunion"
  },
  GERMANY: {
    BERLIN: "Europe/Berlin",
    BUSINGEN: "Europe/Busingen"
  },
  GREECE: {
    ATHENS: "Europe/Athens"
  },
  HUNGARY: {
    BUDAPEST: "Europe/Budapest"
  },
  ICELAND: {
    REYKJAVIK: "Atlantic/Reykjavik"
  },
  IRELAND: {
    DUBLIN: "Europe/Dublin"
  },
  ITALY: {
    ROME: "Europe/Rome"
  },
  LATVIA: {
    RIGA: "Europe/Riga"
  },
  LIECHTENSTEIN: {
    VADUZ: "Europe/Vaduz"
  },
  LITHUANIA: {
    VILNIUS: "Europe/Vilnius"
  },
  LUXEMBOURG: {
    LUXEMBOURG: "Europe/Luxembourg"
  },
  MALTA: {
    MALTA: "Europe/Malta"
  },
  MONACO: {
    MONACO: "Europe/Monaco"
  },
  NETHERLANDS: {
    AMSTERDAM: "Europe/Amsterdam",
    ARUBA: "America/Aruba",
    CURACAO: "America/Curacao",
    KRALENDIJK: "America/Kralendijk",
    LOWER_PRINCES: "America/Lower_Princes"
  },
  NORWAY: {
    OSLO: "Europe/Oslo",
    JAN_MAYEN: "Atlantic/Jan_Mayen",
    LONGYEARBYEN: "Arctic/Longyearbyen"
  },
  POLAND: {
    WARSAW: "Europe/Warsaw"
  },
  PORTUGAL: {
    LISBON: "Europe/Lisbon",
    AZORES: "Atlantic/Azores",
    MADEIRA: "Atlantic/Madeira"
  },
  ROMANIA: {
    BUCHAREST: "Europe/Bucharest"
  },
  SAN_MARINO: {
    SAN_MARINO: "Europe/San_Marino"
  },
  SLOVAKIA: {
    BRATISLAVA: "Europe/Bratislava"
  },
  SLOVENIA: {
    LJUBLJANA: "Europe/Ljubljana"
  },
  SPAIN: {
    MADRID: "Europe/Madrid",
    CANARY: "Atlantic/Canary",
    CEUTA: "Africa/Ceuta"
  },
  SWEDEN: {
    STOCKHOLM: "Europe/Stockholm"
  },
  SWITZERLAND: {
    ZURICH: "Europe/Zurich"
  },
  VATICAN: {
    VATICAN: "Europe/Vatican"
  }
};
var EU_TIMEZONE = [
  TIMEZONE.AUSTRIA.VIENNA,
  TIMEZONE.BELGIUM.BRUSSELS,
  TIMEZONE.BULGARIA.SOFIA,
  TIMEZONE.CROATIA.ZAGREB,
  TIMEZONE.CYPRUS.NICOSIA_EUROPE,
  TIMEZONE.CYPRUS.NICOSIA_ASIA,
  TIMEZONE.CYPRUS.FAMAGUSTA,
  TIMEZONE.CZECHIA.PRAGUE,
  TIMEZONE.DENMARK.COPENHAGEN,
  TIMEZONE.ESTONIA.TALLINN,
  TIMEZONE.FINLAND.HELSINKI,
  TIMEZONE.FINLAND.MARIEHAMN,
  TIMEZONE.FRANCE.PARIS,
  TIMEZONE.GERMANY.BERLIN,
  TIMEZONE.GREECE.ATHENS,
  TIMEZONE.HUNGARY.BUDAPEST,
  TIMEZONE.IRELAND.DUBLIN,
  TIMEZONE.ITALY.ROME,
  TIMEZONE.LATVIA.RIGA,
  TIMEZONE.LITHUANIA.VILNIUS,
  TIMEZONE.LUXEMBOURG.LUXEMBOURG,
  TIMEZONE.MALTA.MALTA,
  TIMEZONE.NETHERLANDS.AMSTERDAM,
  TIMEZONE.POLAND.WARSAW,
  TIMEZONE.PORTUGAL.LISBON,
  TIMEZONE.ROMANIA.BUCHAREST,
  TIMEZONE.SLOVAKIA.BRATISLAVA,
  TIMEZONE.SLOVENIA.LJUBLJANA,
  TIMEZONE.SPAIN.MADRID,
  TIMEZONE.SWEDEN.STOCKHOLM,
  TIMEZONE.FRANCE.CAYENNE,
  TIMEZONE.FRANCE.GUADELOUPE,
  TIMEZONE.FRANCE.MARIGOT,
  TIMEZONE.FRANCE.MARTINIQUE,
  TIMEZONE.FRANCE.MAYOTTE,
  TIMEZONE.FRANCE.REUNION,
  TIMEZONE.PORTUGAL.AZORES,
  TIMEZONE.PORTUGAL.MADEIRA,
  TIMEZONE.SPAIN.CANARY
];
var EEA_EFTA_TIMEZONE = [
  TIMEZONE.ICELAND.REYKJAVIK,
  TIMEZONE.LIECHTENSTEIN.VADUZ,
  TIMEZONE.NORWAY.OSLO,
  TIMEZONE.NORWAY.JAN_MAYEN
];
var EEA_TIMEZONE = [
  ...EU_TIMEZONE,
  ...EEA_EFTA_TIMEZONE
];
var EFTA_TIMEZONE = [
  TIMEZONE.SWITZERLAND.ZURICH,
  ...EEA_EFTA_TIMEZONE
];
var SCHENGEN_TIMEZONE = [
  TIMEZONE.AUSTRIA.VIENNA,
  TIMEZONE.BELGIUM.BRUSSELS,
  TIMEZONE.BULGARIA.SOFIA,
  TIMEZONE.CROATIA.ZAGREB,
  TIMEZONE.CZECHIA.PRAGUE,
  TIMEZONE.DENMARK.COPENHAGEN,
  TIMEZONE.ESTONIA.TALLINN,
  TIMEZONE.FINLAND.HELSINKI,
  TIMEZONE.FINLAND.MARIEHAMN,
  TIMEZONE.FRANCE.PARIS,
  TIMEZONE.GERMANY.BERLIN,
  TIMEZONE.GREECE.ATHENS,
  TIMEZONE.HUNGARY.BUDAPEST,
  TIMEZONE.ITALY.ROME,
  TIMEZONE.LATVIA.RIGA,
  TIMEZONE.LITHUANIA.VILNIUS,
  TIMEZONE.LUXEMBOURG.LUXEMBOURG,
  TIMEZONE.MALTA.MALTA,
  TIMEZONE.NETHERLANDS.AMSTERDAM,
  TIMEZONE.POLAND.WARSAW,
  TIMEZONE.PORTUGAL.LISBON,
  TIMEZONE.PORTUGAL.AZORES,
  TIMEZONE.PORTUGAL.MADEIRA,
  TIMEZONE.ROMANIA.BUCHAREST,
  TIMEZONE.SLOVAKIA.BRATISLAVA,
  TIMEZONE.SLOVENIA.LJUBLJANA,
  TIMEZONE.SPAIN.MADRID,
  TIMEZONE.SPAIN.CANARY,
  TIMEZONE.SWEDEN.STOCKHOLM,
  TIMEZONE.ANDORRA.ANDORRA,
  TIMEZONE.GERMANY.BUSINGEN,
  TIMEZONE.ICELAND.REYKJAVIK,
  TIMEZONE.LIECHTENSTEIN.VADUZ,
  TIMEZONE.MONACO.MONACO,
  TIMEZONE.NORWAY.OSLO,
  TIMEZONE.SAN_MARINO.SAN_MARINO,
  TIMEZONE.SPAIN.CEUTA,
  TIMEZONE.SWITZERLAND.ZURICH,
  TIMEZONE.VATICAN.VATICAN
];
var isTimezoneIn = (tz) => {
  var _a;
  return typeof window !== "undefined" && ((_a = window === null || window === void 0 ? void 0 : window.Intl) === null || _a === void 0 ? void 0 : _a.DateTimeFormat) && tz.includes(Intl.DateTimeFormat().resolvedOptions().timeZone);
};
var isFromEU = () => isTimezoneIn(EU_TIMEZONE);

// node_modules/ua-is-frozen/dist/esm/index.js
function isFrozenUA(ua) {
  return /^Mozilla\/5\.0 \((Windows NT 10\.0; Win64; x64|Macintosh; Intel Mac OS X 10_15_7|X11; Linux x86_64|X11; CrOS x86_64 14541\.0\.0|Fuchsia|Linux; Android 10; K)\) AppleWebKit\/537\.36 \(KHTML, like Gecko\) Chrome\/\d+\.0\.0\.0 (Mobile )?Safari\/537\.36/.test(ua);
}

// node_modules/is-standalone-pwa/dist/esm/index.js
function isStandalonePWA() {
  var _a;
  return typeof window !== "undefined" && ((window === null || window === void 0 ? void 0 : window.matchMedia("(display-mode: standalone)").matches) || ((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone) || document.referrer.startsWith("android-app://") || (window === null || window === void 0 ? void 0 : window.Windows) || /trident.+(msapphost|webview)\//i.test(navigator.userAgent) || document.referrer.startsWith("app-info://platform/microsoft-store"));
}

// node_modules/ua-parser-js/src/helpers/ua-parser-helpers.mjs
var toResult = (value, head, ext) => typeof value === "string" ? UAParser(value, head, ext) : value;
var getDeviceVendor = (model) => UAParser(`Mozilla/5.0 (Linux; Android 10; ${model}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.0.0 Safari/537.36`).device.vendor;
var isAppleSilicon = (resultOrUA) => {
  const res = toResult(resultOrUA);
  if (res.os.is(OS.MACOS)) {
    if (res.cpu.is(CPU.ARM)) {
      return true;
    }
    if (typeof resultOrUA !== "string" && typeof window !== "undefined") {
      try {
        const canvas = document.createElement("canvas");
        const webgl = canvas.getContext("webgl2") || canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
        const debug = webgl.getExtension("WEBGL_debug_renderer_info");
        const renderer = webgl.getParameter(debug.UNMASKED_RENDERER_WEBGL);
        if (renderer.match(/apple m\d/i)) {
          return true;
        }
      } catch {
        return false;
      }
    }
  }
  return false;
};
var isAIBot = (resultOrUA) => [
  // AI2
  "ai2bot",
  // Amazon
  "amazonbot",
  // Anthropic
  "anthropic-ai",
  "claude-web",
  "claudebot",
  // Apple
  "applebot",
  "applebot-extended",
  // ByteDance
  "bytespider",
  // Common Crawl
  "ccbot",
  // DataForSeo
  "dataforseobot",
  // Diffbot
  "diffbot",
  // Google
  "googleother",
  "googleother-image",
  "googleother-video",
  "google-extended",
  // Hive AI
  "imagesiftbot",
  // Huawei
  "petalbot",
  // Meta
  "facebookbot",
  "meta-externalagent",
  // OpenAI
  "gptbot",
  "oai-searchbot",
  // Perplexity
  "perplexitybot",
  // Semrush
  "semrushbot-ocob",
  // Timpi
  "timpibot",
  // Velen.io
  "velenpublicwebcrawler",
  // Webz.io
  "omgili",
  "omgilibot",
  "webzio-extended",
  // You.com
  "youbot",
  // Zyte
  "scrapy"
].includes(String(toResult(resultOrUA, Bots).browser.name).toLowerCase());
var isBot = (resultOrUA) => [
  "cli",
  "crawler",
  "fetcher",
  "library"
].includes(toResult(resultOrUA, Bots).browser.type);
var isChromeFamily = (resultOrUA) => toResult(resultOrUA).engine.is(Engine.BLINK);
var isElectron = () => {
  var _a;
  return !!(((_a = process == null ? void 0 : process.versions) == null ? void 0 : _a.hasOwnProperty("electron")) || // node.js
  / electron\//i.test(navigator == null ? void 0 : navigator.userAgent));
};
export {
  getDeviceVendor,
  isAIBot,
  isAppleSilicon,
  isBot,
  isChromeFamily,
  isElectron,
  isFromEU,
  isFrozenUA,
  isStandalonePWA
};
/*! Bundled license information:

detect-europe-js/dist/esm/index.js:
  (*! detectEurope.js v0.1.2
      Determine whether a user is from the European Union (EU) area
      https://github.com/faisalman/detect-europe-js
      Author: Faisal Salman <f@faisalman.com>
      MIT License *)

ua-is-frozen/dist/esm/index.js:
  (*! isFrozenUA
      A freeze-test for your user-agent string
      https://github.com/faisalman/ua-is-frozen
      Author: Faisal Salman <f@faisalman.com>
      MIT License *)

is-standalone-pwa/dist/esm/index.js:
  (*! isStandalonePWA 0.1.1
      Detect if PWA is running in standalone mode
      https://github.com/faisalman/is-standalone-pwa
      Author: Faisal Salman <f@faisalman.com>
      MIT License *)
*/
//# sourceMappingURL=ua-parser-js_helpers.js.map
