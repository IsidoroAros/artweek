import {
  __commonJS
} from "./chunk-EQCVQC35.js";

// node_modules/@dcl/ui-env/dist/location.js
var require_location = __commonJS({
  "node_modules/@dcl/ui-env/dist/location.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEnvFromQueryParam = exports.getEnvFromTLD = void 0;
    var env_1 = require_env();
    function getEnvFromTLD(location) {
      const { host } = location;
      if (host.endsWith(".org") || host.endsWith(".co")) {
        return env_1.Env.PRODUCTION;
      } else if (host.endsWith(".today") || host.endsWith(".net")) {
        return env_1.Env.STAGING;
      } else if (host.endsWith(".io") || host.endsWith(".zone")) {
        return env_1.Env.DEVELOPMENT;
      }
      return null;
    }
    exports.getEnvFromTLD = getEnvFromTLD;
    function getEnvFromQueryParam(location) {
      const search = new URLSearchParams(location.search);
      const param = search.get("ENV") || search.get("env");
      if (param) {
        const env = param.toLowerCase();
        if ((0, env_1.isEnv)(env)) {
          return env;
        }
      }
      return null;
    }
    exports.getEnvFromQueryParam = getEnvFromQueryParam;
  }
});

// node_modules/@dcl/ui-env/dist/env.js
var require_env = __commonJS({
  "node_modules/@dcl/ui-env/dist/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEnv = exports.getDefaultEnv = exports.parseEnvVar = exports.isEnv = exports.getEnvList = exports.Env = void 0;
    var location_1 = require_location();
    var Env;
    (function(Env2) {
      Env2["DEVELOPMENT"] = "dev";
      Env2["STAGING"] = "stg";
      Env2["PRODUCTION"] = "prod";
    })(Env = exports.Env || (exports.Env = {}));
    function getEnvList() {
      return Object.values(Env);
    }
    exports.getEnvList = getEnvList;
    function isEnv(value) {
      return getEnvList().includes(value);
    }
    exports.isEnv = isEnv;
    function parseEnvVar(envVar) {
      if (isEnv(envVar)) {
        return envVar;
      } else {
        throw new Error(`Invalid value for DCL_DEFAULT_ENV. Found "${envVar}", possible values are ${getEnvList().map((env) => `"${env}"`).join(", ")}.`);
      }
    }
    exports.parseEnvVar = parseEnvVar;
    function getDefaultEnv(envVars = {}) {
      const { DCL_DEFAULT_ENV, REACT_APP_DCL_DEFAULT_ENV, VITE_DCL_DEFAULT_ENV, GATSBY_DCL_DEFAULT_ENV } = envVars;
      if (DCL_DEFAULT_ENV && REACT_APP_DCL_DEFAULT_ENV && DCL_DEFAULT_ENV !== REACT_APP_DCL_DEFAULT_ENV) {
        throw new Error("You have defined both DCL_DEFAULT_ENV and REACT_APP_DCL_DEFAULT_ENV with different values");
      }
      if (DCL_DEFAULT_ENV && VITE_DCL_DEFAULT_ENV && DCL_DEFAULT_ENV !== VITE_DCL_DEFAULT_ENV) {
        throw new Error("You have defined both DCL_DEFAULT_ENV and VITE_DCL_DEFAULT_ENV with different values");
      }
      if (DCL_DEFAULT_ENV && GATSBY_DCL_DEFAULT_ENV && DCL_DEFAULT_ENV !== GATSBY_DCL_DEFAULT_ENV) {
        throw new Error("You have defined both DCL_DEFAULT_ENV and GATSBY_DCL_DEFAULT_ENV with different values");
      }
      if (REACT_APP_DCL_DEFAULT_ENV && GATSBY_DCL_DEFAULT_ENV && REACT_APP_DCL_DEFAULT_ENV !== GATSBY_DCL_DEFAULT_ENV) {
        throw new Error("You have defined both REACT_APP_DCL_DEFAULT_ENV and GATSBY_DCL_DEFAULT_ENV with different values");
      }
      if (DCL_DEFAULT_ENV) {
        return parseEnvVar(DCL_DEFAULT_ENV);
      }
      if (REACT_APP_DCL_DEFAULT_ENV) {
        return parseEnvVar(REACT_APP_DCL_DEFAULT_ENV);
      }
      if (VITE_DCL_DEFAULT_ENV) {
        return parseEnvVar(VITE_DCL_DEFAULT_ENV);
      }
      if (GATSBY_DCL_DEFAULT_ENV) {
        return parseEnvVar(GATSBY_DCL_DEFAULT_ENV);
      }
      return Env.PRODUCTION;
    }
    exports.getDefaultEnv = getDefaultEnv;
    function getEnv(systemEnvVariables) {
      if (typeof window !== "undefined") {
        const envFromQueryParam = (0, location_1.getEnvFromQueryParam)(window.location);
        if (envFromQueryParam) {
          return envFromQueryParam;
        }
        const envFromTLD = (0, location_1.getEnvFromTLD)(window.location);
        if (envFromTLD) {
          return envFromTLD;
        }
      }
      const envVars = typeof systemEnvVariables === "undefined" && typeof process === "object" && typeof process.env === "object" ? process.env : systemEnvVariables;
      return getDefaultEnv(envVars);
    }
    exports.getEnv = getEnv;
  }
});

// node_modules/@dcl/ui-env/dist/config.js
var require_config = __commonJS({
  "node_modules/@dcl/ui-env/dist/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfig = void 0;
    var env_1 = require_env();
    function createConfig(configByEnv, options) {
      const env = (0, env_1.getEnv)(options === null || options === void 0 ? void 0 : options.systemEnvVariables);
      const config = configByEnv[env];
      return {
        get: (name, defaultValue = "") => {
          if (!config) {
            throw new Error(`Could not find a config for env=${env}`);
          }
          return name in config ? config[name] : defaultValue;
        },
        is: (_env) => env === _env,
        getEnv: () => env
      };
    }
    exports.createConfig = createConfig;
  }
});

// node_modules/@dcl/ui-env/dist/index.js
var require_dist = __commonJS({
  "node_modules/@dcl/ui-env/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEnv = exports.Env = exports.createConfig = void 0;
    var config_1 = require_config();
    Object.defineProperty(exports, "createConfig", { enumerable: true, get: function() {
      return config_1.createConfig;
    } });
    var env_1 = require_env();
    Object.defineProperty(exports, "Env", { enumerable: true, get: function() {
      return env_1.Env;
    } });
    Object.defineProperty(exports, "getEnv", { enumerable: true, get: function() {
      return env_1.getEnv;
    } });
  }
});
export default require_dist();
//# sourceMappingURL=@dcl_ui-env.js.map
