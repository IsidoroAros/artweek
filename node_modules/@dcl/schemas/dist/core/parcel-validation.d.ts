import { JSONSchema, ValidateFunction } from '../validation';
import { KeywordDefinition } from 'ajv';
/**
 * Represents a parcel with X and Y coordinates
 * @public
 */
export type Parcel = {
    x: number;
    y: number;
};
/**
 * Standard limits for parcels in Decentraland
 * @public
 */
export declare const PARCEL_LIMITS: {
    minX: number;
    maxX: number;
    minY: number;
    maxY: number;
};
/**
 * Namespace with utilities to validate parcels
 * @public
 */
export declare namespace Parcel {
    /**
     * Custom validation to check if coordinates are within limits
     */
    const _isInLimits: KeywordDefinition;
    const schema: JSONSchema<Parcel>;
    const validate: ValidateFunction<Parcel>;
    function parcelToString({ x, y }: Parcel): string;
    function stringToParcel(position: string): Parcel | null;
    /**
     * Validates if a string in "x,y" format represents a valid parcel
     */
    function isParcelStringValid(parcelString: string): boolean;
    /**
     * Checks if a parcel is within the standard bounds
     */
    function isInStandardBounds(parcel: Parcel): boolean;
    /**
     * Checks if a parcel is a known exception
     */
    function isExceptionParcel(parcel: Parcel): boolean;
    /**
     * Checks if a parcel is within bounds or is a valid exception
     */
    function isInBounds(parcel: Parcel): boolean;
    /**
     * Validates if a parcel is valid (satisfies the schema and is within bounds or is an exception)
     */
    function isValid(parcel: Parcel): boolean;
    /**
     * Validates if a parcel in string format is valid
     */
    function isValidString(parcelString: string): boolean;
}
//# sourceMappingURL=parcel-validation.d.ts.map