import { EthAddress } from '../../misc';
import { JSONSchema, ValidateFunction } from '../../validation';
import { BaseEvent, Events } from './base';
export type BadgeGrantedEvent = BaseEvent & {
    type: Events.Type.BADGE;
    subType: Events.SubType.Badge.GRANTED;
    metadata: {
        badgeId: string;
        badgeName: string;
        badgeTierName?: string;
        badgeImageUrl: string;
        address: string;
    };
};
export declare namespace BadgeGrantedEvent {
    const schema: JSONSchema<BadgeGrantedEvent>;
    const validate: ValidateFunction<BadgeGrantedEvent>;
}
export type AssetBundleConversionFinishedEvent = BaseEvent & {
    type: Events.Type.ASSET_BUNDLE;
    subType: Events.SubType.AssetBundle.CONVERTED;
    metadata: {
        entityId: string;
        platform: 'windows' | 'mac' | 'webgl';
        statusCode: number;
        isLods: boolean;
        isWorld: boolean;
    };
};
export declare namespace AssetBundleConversionFinishedEvent {
    const schema: JSONSchema<AssetBundleConversionFinishedEvent>;
    const validate: ValidateFunction<AssetBundleConversionFinishedEvent>;
}
export type AssetBundleConversionManuallyQueuedEvent = BaseEvent & {
    type: Events.Type.ASSET_BUNDLE;
    subType: Events.SubType.AssetBundle.MANUALLY_QUEUED;
    metadata: {
        entityId: string;
        platform: 'windows' | 'mac' | 'webgl';
        isLods: boolean;
        isPriority: boolean;
    };
};
export declare namespace AssetBundleConversionManuallyQueuedEvent {
    const schema: JSONSchema<AssetBundleConversionManuallyQueuedEvent>;
    const validate: ValidateFunction<AssetBundleConversionManuallyQueuedEvent>;
}
export type FriendshipRequestEvent = BaseEvent & {
    type: Events.Type.SOCIAL_SERVICE;
    subType: Events.SubType.SocialService.FRIENDSHIP_REQUEST;
    metadata: {
        requestId: string;
        sender: {
            address: string;
            name: string;
            profileImageUrl: string;
            hasClaimedName: boolean;
        };
        receiver: {
            address: string;
            name: string;
            profileImageUrl: string;
            hasClaimedName: boolean;
        };
        message?: string;
    };
};
export declare namespace FriendshipRequestEvent {
    const schema: JSONSchema<FriendshipRequestEvent>;
    const validate: ValidateFunction<FriendshipRequestEvent>;
}
export type FriendshipAcceptedEvent = BaseEvent & {
    type: Events.Type.SOCIAL_SERVICE;
    subType: Events.SubType.SocialService.FRIENDSHIP_ACCEPTED;
    metadata: {
        requestId: string;
        sender: {
            address: string;
            name: string;
            profileImageUrl: string;
            hasClaimedName: boolean;
        };
        receiver: {
            address: string;
            name: string;
            profileImageUrl: string;
            hasClaimedName: boolean;
        };
    };
};
export declare namespace FriendshipAcceptedEvent {
    const schema: JSONSchema<FriendshipAcceptedEvent>;
    const validate: ValidateFunction<FriendshipAcceptedEvent>;
}
export type CreditsGoalCompletedEvent = BaseEvent & {
    type: Events.Type.CREDITS_SERVICE;
    subType: Events.SubType.CreditsService.CREDITS_GOAL_COMPLETED;
    metadata: {
        goalId: string;
        creditsObtained: number;
        seasonId: number;
        weekNumber: number;
        address: EthAddress;
    };
};
export declare namespace CreditsGoalCompletedEvent {
    const schema: JSONSchema<CreditsGoalCompletedEvent>;
    const validate: ValidateFunction<CreditsGoalCompletedEvent>;
}
export type CreditsCompleteGoalsReminderEvent = BaseEvent & {
    type: Events.Type.CREDITS_SERVICE;
    subType: Events.SubType.CreditsService.COMPLETE_GOALS_REMINDER;
    metadata: {
        address: EthAddress;
        seasonId: number;
        weekNumber: number;
        pendingGoalIds: string[];
    };
};
export declare namespace CreditsCompleteGoalsReminderEvent {
    const schema: JSONSchema<CreditsCompleteGoalsReminderEvent>;
    const validate: ValidateFunction<CreditsCompleteGoalsReminderEvent>;
}
export type CreditsUsageReminderEvent = BaseEvent & {
    type: Events.Type.CREDITS_SERVICE;
    subType: Events.SubType.CreditsService.USAGE_REMINDER;
    metadata: {
        address: EthAddress;
        creditsAmount: number;
        expirationDate: string;
    };
};
export declare namespace CreditsUsageReminderEvent {
    const schema: JSONSchema<CreditsUsageReminderEvent>;
    const validate: ValidateFunction<CreditsUsageReminderEvent>;
}
export type CreditsUsage24HoursReminderEvent = BaseEvent & {
    type: Events.Type.CREDITS_SERVICE;
    subType: Events.SubType.CreditsService.USAGE_24_HOURS_REMINDER;
    metadata: {
        address: EthAddress;
        creditsAmount: number;
        expirationDate: string;
    };
};
export declare namespace CreditsUsage24HoursReminderEvent {
    const schema: JSONSchema<CreditsUsage24HoursReminderEvent>;
    const validate: ValidateFunction<CreditsUsage24HoursReminderEvent>;
}
export type CreditsDoNotMissOutReminderEvent = BaseEvent & {
    type: Events.Type.CREDITS_SERVICE;
    subType: Events.SubType.CreditsService.DO_NOT_MISS_OUT_REMINDER;
    metadata: {
        address: EthAddress;
    };
};
export declare namespace CreditsDoNotMissOutReminderEvent {
    const schema: JSONSchema<CreditsDoNotMissOutReminderEvent>;
    const validate: ValidateFunction<CreditsDoNotMissOutReminderEvent>;
}
export type CreditsClaimReminderEvent = BaseEvent & {
    type: Events.Type.CREDITS_SERVICE;
    subType: Events.SubType.CreditsService.CLAIM_CREDITS_REMINDER;
    metadata: {
        address: EthAddress;
        seasonId: number;
        weekNumber: number;
    };
};
export declare namespace CreditsClaimReminderEvent {
    const schema: JSONSchema<CreditsClaimReminderEvent>;
    const validate: ValidateFunction<CreditsClaimReminderEvent>;
}
//# sourceMappingURL=services.d.ts.map