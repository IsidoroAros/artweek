"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RewardDelayedEvent = exports.CampaignOutOfStockEvent = exports.CampaignGasPriceHigherThanExpectedEvent = exports.CampaignOutOfFundsEvent = exports.RewardAssignedEvent = exports.RewardInProgressEvent = void 0;
const validation_1 = require("../../validation");
const base_1 = require("./base");
const utils_1 = require("./utils");
const rewardEventMetadataSchema = {
    type: 'object',
    properties: {
        title: { type: 'string' },
        description: { type: 'string' },
        link: { type: 'string', nullable: true },
        beneficiary: { type: 'string' },
        tokenName: { type: 'string' },
        tokenImage: { type: 'string' },
        tokenRarity: { type: 'string', nullable: true },
        tokenCategory: { type: 'string', nullable: true }
    },
    required: ['title', 'description', 'beneficiary', 'tokenName', 'tokenImage'],
    additionalProperties: false
};
const campaignEventMetadataSchema = {
    type: 'object',
    properties: {
        title: { type: 'string' },
        description: { type: 'string' },
        link: { type: 'string', nullable: true },
        owner: { type: 'string' },
        campaignId: { type: 'string' },
        campaignName: { type: 'string' }
    },
    required: ['title', 'description', 'owner', 'campaignId', 'campaignName'],
    additionalProperties: false
};
var RewardInProgressEvent;
(function (RewardInProgressEvent) {
    RewardInProgressEvent.schema = (0, utils_1.createEventSchema)(base_1.Events.Type.REWARDS, base_1.Events.SubType.Rewards.REWARD_IN_PROGRESS, rewardEventMetadataSchema);
    RewardInProgressEvent.validate = (0, validation_1.generateLazyValidator)(RewardInProgressEvent.schema);
})(RewardInProgressEvent = exports.RewardInProgressEvent || (exports.RewardInProgressEvent = {}));
var RewardAssignedEvent;
(function (RewardAssignedEvent) {
    RewardAssignedEvent.schema = (0, utils_1.createEventSchema)(base_1.Events.Type.REWARDS, base_1.Events.SubType.Rewards.REWARD_ASSIGNED, rewardEventMetadataSchema);
    RewardAssignedEvent.validate = (0, validation_1.generateLazyValidator)(RewardAssignedEvent.schema);
})(RewardAssignedEvent = exports.RewardAssignedEvent || (exports.RewardAssignedEvent = {}));
var CampaignOutOfFundsEvent;
(function (CampaignOutOfFundsEvent) {
    CampaignOutOfFundsEvent.schema = (0, utils_1.createEventSchema)(base_1.Events.Type.REWARDS, base_1.Events.SubType.Rewards.CAMPAIGN_OUT_OF_FUNDS, campaignEventMetadataSchema);
    CampaignOutOfFundsEvent.validate = (0, validation_1.generateLazyValidator)(CampaignOutOfFundsEvent.schema);
})(CampaignOutOfFundsEvent = exports.CampaignOutOfFundsEvent || (exports.CampaignOutOfFundsEvent = {}));
var CampaignGasPriceHigherThanExpectedEvent;
(function (CampaignGasPriceHigherThanExpectedEvent) {
    CampaignGasPriceHigherThanExpectedEvent.schema = (0, utils_1.createEventSchema)(base_1.Events.Type.REWARDS, base_1.Events.SubType.Rewards.CAMPAIGN_GAS_PRICE_HIGHER_THAN_EXPECTED, campaignEventMetadataSchema);
    CampaignGasPriceHigherThanExpectedEvent.validate = (0, validation_1.generateLazyValidator)(CampaignGasPriceHigherThanExpectedEvent.schema);
})(CampaignGasPriceHigherThanExpectedEvent = exports.CampaignGasPriceHigherThanExpectedEvent || (exports.CampaignGasPriceHigherThanExpectedEvent = {}));
var CampaignOutOfStockEvent;
(function (CampaignOutOfStockEvent) {
    CampaignOutOfStockEvent.schema = (0, utils_1.createEventSchema)(base_1.Events.Type.REWARDS, base_1.Events.SubType.Rewards.CAMPAIGN_OUT_OF_STOCK, campaignEventMetadataSchema);
    CampaignOutOfStockEvent.validate = (0, validation_1.generateLazyValidator)(CampaignOutOfStockEvent.schema);
})(CampaignOutOfStockEvent = exports.CampaignOutOfStockEvent || (exports.CampaignOutOfStockEvent = {}));
var RewardDelayedEvent;
(function (RewardDelayedEvent) {
    RewardDelayedEvent.schema = (0, utils_1.createEventSchema)(base_1.Events.Type.REWARDS, base_1.Events.SubType.Rewards.REWARD_DELAYED, rewardEventMetadataSchema);
    RewardDelayedEvent.validate = (0, validation_1.generateLazyValidator)(RewardDelayedEvent.schema);
})(RewardDelayedEvent = exports.RewardDelayedEvent || (exports.RewardDelayedEvent = {}));
//# sourceMappingURL=rewards.js.map