"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Events = void 0;
var Events;
(function (Events) {
    let Type;
    (function (Type) {
        Type["BLOCKCHAIN"] = "blockchain";
        Type["CATALYST_DEPLOYMENT"] = "catalyst-deployment";
        Type["WORLD"] = "world";
        Type["CLIENT"] = "client";
        Type["MARKETPLACE"] = "marketplace";
        Type["REWARDS"] = "rewards";
        Type["BADGE"] = "badge";
        Type["ASSET_BUNDLE"] = "asset-bundle";
        Type["SOCIAL_SERVICE"] = "social-service";
        Type["CREDITS_SERVICE"] = "credits-service";
        Type["STREAMING"] = "streaming";
        Type["COMMS"] = "comms";
        Type["REFERRAL"] = "referral";
    })(Type = Events.Type || (Events.Type = {}));
    let SubType;
    (function (SubType) {
        let Blockchain;
        (function (Blockchain) {
            Blockchain["BID_ACCEPTED"] = "bid-accepted";
            Blockchain["ITEM_SOLD"] = "item-sold";
            Blockchain["RENTAL_ENDED"] = "land-rental-ended";
            Blockchain["RENTAL_STARTED"] = "land-rental-started";
            Blockchain["ROYALTIES_EARNED"] = "royalties-earned";
            Blockchain["COLLECTION_CREATED"] = "collection-created";
            Blockchain["ITEM_PUBLISHED"] = "item-published";
        })(Blockchain = SubType.Blockchain || (SubType.Blockchain = {}));
        let Marketplace;
        (function (Marketplace) {
            Marketplace["BID_RECEIVED"] = "bid-received";
        })(Marketplace = SubType.Marketplace || (SubType.Marketplace = {}));
        let CatalystDeployment;
        (function (CatalystDeployment) {
            CatalystDeployment["SCENE"] = "scene";
            CatalystDeployment["PROFILE"] = "profile";
            CatalystDeployment["WEARABLE"] = "wearable";
            CatalystDeployment["STORE"] = "store";
            CatalystDeployment["EMOTE"] = "emote";
            CatalystDeployment["OUTFITS"] = "outfits";
        })(CatalystDeployment = SubType.CatalystDeployment || (SubType.CatalystDeployment = {}));
        let Worlds;
        (function (Worlds) {
            Worlds["DEPLOYMENT"] = "deployment";
        })(Worlds = SubType.Worlds || (SubType.Worlds = {}));
        let Client;
        (function (Client) {
            Client["LOGGED_IN"] = "logged-in";
            Client["LOGGED_IN_CACHED"] = "logged-in-cached";
            Client["MOVE_TO_PARCEL"] = "move-to-parcel";
            Client["USED_EMOTE"] = "used-emote";
            Client["PASSPORT_OPENED"] = "passport-opened";
            Client["WALKED_DISTANCE"] = "walked-distance";
            Client["VERTICAL_HEIGHT_REACHED"] = "vertical-height-reached";
        })(Client = SubType.Client || (SubType.Client = {}));
        let Rewards;
        (function (Rewards) {
            Rewards["REWARD_IN_PROGRESS"] = "reward-in-progress";
            Rewards["REWARD_ASSIGNED"] = "reward-assigned";
            Rewards["CAMPAIGN_OUT_OF_FUNDS"] = "campaign-out-of-funds";
            Rewards["CAMPAIGN_GAS_PRICE_HIGHER_THAN_EXPECTED"] = "campaign-gas-price-higher-than-expected";
            Rewards["CAMPAIGN_OUT_OF_STOCK"] = "campaign-out-of-stock";
            Rewards["REWARD_DELAYED"] = "reward-delayed";
        })(Rewards = SubType.Rewards || (SubType.Rewards = {}));
        let Badge;
        (function (Badge) {
            Badge["GRANTED"] = "badge-granted";
        })(Badge = SubType.Badge || (SubType.Badge = {}));
        let AssetBundle;
        (function (AssetBundle) {
            AssetBundle["CONVERTED"] = "converted";
            AssetBundle["MANUALLY_QUEUED"] = "manually-queued";
        })(AssetBundle = SubType.AssetBundle || (SubType.AssetBundle = {}));
        let SocialService;
        (function (SocialService) {
            SocialService["FRIENDSHIP_REQUEST"] = "friendship-request";
            SocialService["FRIENDSHIP_ACCEPTED"] = "friendship-accepted";
        })(SocialService = SubType.SocialService || (SubType.SocialService = {}));
        let CreditsService;
        (function (CreditsService) {
            CreditsService["CREDITS_GOAL_COMPLETED"] = "credits-goal-completed";
            CreditsService["COMPLETE_GOALS_REMINDER"] = "complete-goals-reminder";
            CreditsService["CLAIM_CREDITS_REMINDER"] = "claim-credits-reminder";
            CreditsService["DO_NOT_MISS_OUT_REMINDER"] = "do-not-miss-out-reminder";
            CreditsService["USAGE_REMINDER"] = "usage-reminder";
            CreditsService["USAGE_24_HOURS_REMINDER"] = "usage-24-hours-reminder";
        })(CreditsService = SubType.CreditsService || (SubType.CreditsService = {}));
        let Streaming;
        (function (Streaming) {
            Streaming["STREAMING_KEY_RESET"] = "streaming-key-reset";
            Streaming["STREAMING_KEY_REVOKE"] = "streaming-key-revoke";
            Streaming["STREAMING_KEY_EXPIRED"] = "streaming-key-expired";
            Streaming["STREAMING_TIME_EXCEEDED"] = "streaming-time-exceeded";
            Streaming["STREAMING_PLACE_UPDATED"] = "streaming-place-updated";
        })(Streaming = SubType.Streaming || (SubType.Streaming = {}));
        let Comms;
        (function (Comms) {
            Comms["USER_JOINED_ROOM"] = "user-joined-room";
        })(Comms = SubType.Comms || (SubType.Comms = {}));
        let Referral;
        (function (Referral) {
            Referral["REFERRAL_INVITED_USERS_ACCEPTED"] = "referral-invited-users-accepted";
            Referral["REFERRAL_NEW_TIER_REACHED"] = "referral-new-tier-reached";
        })(Referral = SubType.Referral || (SubType.Referral = {}));
    })(SubType = Events.SubType || (Events.SubType = {}));
})(Events = exports.Events || (exports.Events = {}));
//# sourceMappingURL=base.js.map