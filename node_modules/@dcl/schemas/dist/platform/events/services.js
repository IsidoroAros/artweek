"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreditsClaimReminderEvent = exports.CreditsDoNotMissOutReminderEvent = exports.CreditsUsage24HoursReminderEvent = exports.CreditsUsageReminderEvent = exports.CreditsCompleteGoalsReminderEvent = exports.CreditsGoalCompletedEvent = exports.FriendshipAcceptedEvent = exports.FriendshipRequestEvent = exports.AssetBundleConversionManuallyQueuedEvent = exports.AssetBundleConversionFinishedEvent = exports.BadgeGrantedEvent = void 0;
const validation_1 = require("../../validation");
const base_1 = require("./base");
var BadgeGrantedEvent;
(function (BadgeGrantedEvent) {
    BadgeGrantedEvent.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: base_1.Events.Type.BADGE },
            subType: { type: 'string', const: base_1.Events.SubType.Badge.GRANTED },
            key: { type: 'string' },
            timestamp: { type: 'number', minimum: 0 },
            metadata: {
                type: 'object',
                properties: {
                    badgeId: { type: 'string' },
                    badgeTierName: { type: 'string', nullable: true },
                    badgeName: { type: 'string' },
                    badgeImageUrl: { type: 'string' },
                    address: { type: 'string' }
                },
                required: ['badgeId', 'badgeName', 'badgeImageUrl', 'address']
            }
        },
        required: ['type', 'subType', 'key', 'timestamp', 'metadata'],
        additionalProperties: true
    };
    BadgeGrantedEvent.validate = (0, validation_1.generateLazyValidator)(BadgeGrantedEvent.schema);
})(BadgeGrantedEvent = exports.BadgeGrantedEvent || (exports.BadgeGrantedEvent = {}));
var AssetBundleConversionFinishedEvent;
(function (AssetBundleConversionFinishedEvent) {
    AssetBundleConversionFinishedEvent.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: base_1.Events.Type.ASSET_BUNDLE },
            subType: { type: 'string', const: base_1.Events.SubType.AssetBundle.CONVERTED },
            key: { type: 'string' },
            timestamp: { type: 'number', minimum: 0 },
            metadata: {
                type: 'object',
                properties: {
                    entityId: { type: 'string' },
                    platform: { type: 'string', enum: ['windows', 'mac', 'webgl'] },
                    statusCode: { type: 'number' },
                    isLods: { type: 'boolean' },
                    isWorld: { type: 'boolean' }
                },
                required: ['entityId', 'platform', 'statusCode', 'isLods', 'isWorld']
            }
        },
        required: ['type', 'subType', 'key', 'timestamp', 'metadata'],
        additionalProperties: true
    };
    AssetBundleConversionFinishedEvent.validate = (0, validation_1.generateLazyValidator)(AssetBundleConversionFinishedEvent.schema);
})(AssetBundleConversionFinishedEvent = exports.AssetBundleConversionFinishedEvent || (exports.AssetBundleConversionFinishedEvent = {}));
var AssetBundleConversionManuallyQueuedEvent;
(function (AssetBundleConversionManuallyQueuedEvent) {
    AssetBundleConversionManuallyQueuedEvent.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: base_1.Events.Type.ASSET_BUNDLE },
            subType: { type: 'string', const: base_1.Events.SubType.AssetBundle.MANUALLY_QUEUED },
            key: { type: 'string' },
            timestamp: { type: 'number', minimum: 0 },
            metadata: {
                type: 'object',
                properties: {
                    entityId: { type: 'string' },
                    platform: { type: 'string', enum: ['windows', 'mac', 'webgl'] },
                    isLods: { type: 'boolean' },
                    isPriority: { type: 'boolean' }
                },
                required: ['entityId', 'platform', 'isLods']
            }
        },
        required: ['type', 'subType', 'key', 'timestamp', 'metadata'],
        additionalProperties: true
    };
    AssetBundleConversionManuallyQueuedEvent.validate = (0, validation_1.generateLazyValidator)(AssetBundleConversionManuallyQueuedEvent.schema);
})(AssetBundleConversionManuallyQueuedEvent = exports.AssetBundleConversionManuallyQueuedEvent || (exports.AssetBundleConversionManuallyQueuedEvent = {}));
var FriendshipRequestEvent;
(function (FriendshipRequestEvent) {
    FriendshipRequestEvent.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: base_1.Events.Type.SOCIAL_SERVICE },
            subType: { type: 'string', const: base_1.Events.SubType.SocialService.FRIENDSHIP_REQUEST },
            key: { type: 'string' },
            timestamp: { type: 'number', minimum: 0 },
            metadata: {
                type: 'object',
                properties: {
                    requestId: { type: 'string' },
                    sender: {
                        type: 'object',
                        properties: {
                            address: { type: 'string' },
                            name: { type: 'string' },
                            profileImageUrl: { type: 'string' },
                            hasClaimedName: { type: 'boolean' }
                        },
                        required: ['address', 'name', 'profileImageUrl', 'hasClaimedName']
                    },
                    receiver: {
                        type: 'object',
                        properties: {
                            address: { type: 'string' },
                            name: { type: 'string' },
                            profileImageUrl: { type: 'string' },
                            hasClaimedName: { type: 'boolean' }
                        },
                        required: ['address', 'name', 'profileImageUrl', 'hasClaimedName']
                    },
                    message: { type: 'string', nullable: true }
                },
                required: ['requestId', 'sender', 'receiver']
            }
        },
        required: ['type', 'subType', 'key', 'timestamp', 'metadata'],
        additionalProperties: true
    };
    FriendshipRequestEvent.validate = (0, validation_1.generateLazyValidator)(FriendshipRequestEvent.schema);
})(FriendshipRequestEvent = exports.FriendshipRequestEvent || (exports.FriendshipRequestEvent = {}));
var FriendshipAcceptedEvent;
(function (FriendshipAcceptedEvent) {
    FriendshipAcceptedEvent.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: base_1.Events.Type.SOCIAL_SERVICE },
            subType: { type: 'string', const: base_1.Events.SubType.SocialService.FRIENDSHIP_ACCEPTED },
            key: { type: 'string' },
            timestamp: { type: 'number', minimum: 0 },
            metadata: {
                type: 'object',
                properties: {
                    requestId: { type: 'string' },
                    sender: {
                        type: 'object',
                        properties: {
                            address: { type: 'string' },
                            name: { type: 'string' },
                            profileImageUrl: { type: 'string' },
                            hasClaimedName: { type: 'boolean' }
                        },
                        required: ['address', 'name', 'profileImageUrl', 'hasClaimedName']
                    },
                    receiver: {
                        type: 'object',
                        properties: {
                            address: { type: 'string' },
                            name: { type: 'string' },
                            profileImageUrl: { type: 'string' },
                            hasClaimedName: { type: 'boolean' }
                        },
                        required: ['address', 'name', 'profileImageUrl', 'hasClaimedName']
                    }
                },
                required: ['requestId', 'sender', 'receiver']
            }
        },
        required: ['type', 'subType', 'key', 'timestamp', 'metadata'],
        additionalProperties: true
    };
    FriendshipAcceptedEvent.validate = (0, validation_1.generateLazyValidator)(FriendshipAcceptedEvent.schema);
})(FriendshipAcceptedEvent = exports.FriendshipAcceptedEvent || (exports.FriendshipAcceptedEvent = {}));
var CreditsGoalCompletedEvent;
(function (CreditsGoalCompletedEvent) {
    CreditsGoalCompletedEvent.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: base_1.Events.Type.CREDITS_SERVICE },
            subType: { type: 'string', const: base_1.Events.SubType.CreditsService.CREDITS_GOAL_COMPLETED },
            key: { type: 'string' },
            timestamp: { type: 'number', minimum: 0 },
            metadata: {
                type: 'object',
                properties: {
                    goalId: { type: 'string' },
                    creditsObtained: { type: 'number', minimum: 0 },
                    seasonId: { type: 'number', minimum: 1 },
                    weekNumber: { type: 'number', minimum: 1 },
                    address: { type: 'string' }
                },
                required: ['goalId', 'creditsObtained', 'seasonId', 'weekNumber', 'address']
            }
        },
        required: ['type', 'subType', 'key', 'timestamp', 'metadata'],
        additionalProperties: true
    };
    CreditsGoalCompletedEvent.validate = (0, validation_1.generateLazyValidator)(CreditsGoalCompletedEvent.schema);
})(CreditsGoalCompletedEvent = exports.CreditsGoalCompletedEvent || (exports.CreditsGoalCompletedEvent = {}));
var CreditsCompleteGoalsReminderEvent;
(function (CreditsCompleteGoalsReminderEvent) {
    CreditsCompleteGoalsReminderEvent.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: base_1.Events.Type.CREDITS_SERVICE },
            subType: { type: 'string', const: base_1.Events.SubType.CreditsService.COMPLETE_GOALS_REMINDER },
            key: { type: 'string' },
            timestamp: { type: 'number', minimum: 0 },
            metadata: {
                type: 'object',
                properties: {
                    address: { type: 'string' },
                    seasonId: { type: 'number', minimum: 1 },
                    weekNumber: { type: 'number', minimum: 1 },
                    pendingGoalIds: { type: 'array', items: { type: 'string' }, minItems: 1 }
                },
                required: ['address', 'seasonId', 'weekNumber', 'pendingGoalIds']
            }
        },
        required: ['type', 'subType', 'key', 'timestamp', 'metadata'],
        additionalProperties: true
    };
    CreditsCompleteGoalsReminderEvent.validate = (0, validation_1.generateLazyValidator)(CreditsCompleteGoalsReminderEvent.schema);
})(CreditsCompleteGoalsReminderEvent = exports.CreditsCompleteGoalsReminderEvent || (exports.CreditsCompleteGoalsReminderEvent = {}));
var CreditsUsageReminderEvent;
(function (CreditsUsageReminderEvent) {
    CreditsUsageReminderEvent.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: base_1.Events.Type.CREDITS_SERVICE },
            subType: { type: 'string', const: base_1.Events.SubType.CreditsService.USAGE_REMINDER },
            key: { type: 'string' },
            timestamp: { type: 'number', minimum: 0 },
            metadata: {
                type: 'object',
                properties: {
                    address: { type: 'string' },
                    creditsAmount: { type: 'number', minimum: 1 },
                    expirationDate: { type: 'string' }
                },
                required: ['address', 'creditsAmount', 'expirationDate']
            }
        },
        required: ['type', 'subType', 'key', 'timestamp', 'metadata'],
        additionalProperties: true
    };
    CreditsUsageReminderEvent.validate = (0, validation_1.generateLazyValidator)(CreditsUsageReminderEvent.schema);
})(CreditsUsageReminderEvent = exports.CreditsUsageReminderEvent || (exports.CreditsUsageReminderEvent = {}));
var CreditsUsage24HoursReminderEvent;
(function (CreditsUsage24HoursReminderEvent) {
    CreditsUsage24HoursReminderEvent.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: base_1.Events.Type.CREDITS_SERVICE },
            subType: { type: 'string', const: base_1.Events.SubType.CreditsService.USAGE_24_HOURS_REMINDER },
            key: { type: 'string' },
            timestamp: { type: 'number', minimum: 0 },
            metadata: {
                type: 'object',
                properties: {
                    address: { type: 'string' },
                    creditsAmount: { type: 'number', minimum: 1 },
                    expirationDate: { type: 'string' }
                },
                required: ['address', 'creditsAmount', 'expirationDate']
            }
        },
        required: ['type', 'subType', 'key', 'timestamp', 'metadata'],
        additionalProperties: true
    };
    CreditsUsage24HoursReminderEvent.validate = (0, validation_1.generateLazyValidator)(CreditsUsage24HoursReminderEvent.schema);
})(CreditsUsage24HoursReminderEvent = exports.CreditsUsage24HoursReminderEvent || (exports.CreditsUsage24HoursReminderEvent = {}));
var CreditsDoNotMissOutReminderEvent;
(function (CreditsDoNotMissOutReminderEvent) {
    CreditsDoNotMissOutReminderEvent.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: base_1.Events.Type.CREDITS_SERVICE },
            subType: { type: 'string', const: base_1.Events.SubType.CreditsService.DO_NOT_MISS_OUT_REMINDER },
            key: { type: 'string' },
            timestamp: { type: 'number', minimum: 0 },
            metadata: {
                type: 'object',
                properties: {
                    address: { type: 'string' }
                },
                required: ['address']
            }
        },
        required: ['type', 'subType', 'key', 'timestamp', 'metadata'],
        additionalProperties: true
    };
    CreditsDoNotMissOutReminderEvent.validate = (0, validation_1.generateLazyValidator)(CreditsDoNotMissOutReminderEvent.schema);
})(CreditsDoNotMissOutReminderEvent = exports.CreditsDoNotMissOutReminderEvent || (exports.CreditsDoNotMissOutReminderEvent = {}));
var CreditsClaimReminderEvent;
(function (CreditsClaimReminderEvent) {
    CreditsClaimReminderEvent.schema = {
        type: 'object',
        properties: {
            type: { type: 'string', const: base_1.Events.Type.CREDITS_SERVICE },
            subType: { type: 'string', const: base_1.Events.SubType.CreditsService.CLAIM_CREDITS_REMINDER },
            key: { type: 'string' },
            timestamp: { type: 'number', minimum: 0 },
            metadata: {
                type: 'object',
                properties: {
                    address: { type: 'string' },
                    seasonId: { type: 'number', minimum: 1 },
                    weekNumber: { type: 'number', minimum: 1 }
                },
                required: ['address', 'seasonId', 'weekNumber']
            }
        },
        required: ['type', 'subType', 'key', 'timestamp', 'metadata'],
        additionalProperties: true
    };
    CreditsClaimReminderEvent.validate = (0, validation_1.generateLazyValidator)(CreditsClaimReminderEvent.schema);
})(CreditsClaimReminderEvent = exports.CreditsClaimReminderEvent || (exports.CreditsClaimReminderEvent = {}));
//# sourceMappingURL=services.js.map