"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamingPlaceUpdatedEvent = exports.StreamingTimeExceededEvent = exports.StreamingKeyExpiredEvent = exports.StreamingKeyRevokeEvent = exports.StreamingKeyResetEvent = void 0;
const validation_1 = require("../../validation");
const base_1 = require("./base");
const utils_1 = require("./utils");
const streamingMetadataSchema = {
    type: 'object',
    properties: {
        title: { type: 'string' },
        description: { type: 'string' },
        position: { type: 'string' },
        worldName: { type: 'string', nullable: true },
        isWorld: { type: 'boolean' },
        url: { type: 'string' },
        address: { type: 'string' },
        image: { type: 'string' }
    },
    required: ['position', 'isWorld', 'url', 'title', 'description', 'address', 'image'],
    additionalProperties: false
};
var StreamingKeyResetEvent;
(function (StreamingKeyResetEvent) {
    StreamingKeyResetEvent.schema = (0, utils_1.createEventSchema)(base_1.Events.Type.STREAMING, base_1.Events.SubType.Streaming.STREAMING_KEY_RESET, streamingMetadataSchema);
    StreamingKeyResetEvent.validate = (0, validation_1.generateLazyValidator)(StreamingKeyResetEvent.schema);
})(StreamingKeyResetEvent = exports.StreamingKeyResetEvent || (exports.StreamingKeyResetEvent = {}));
var StreamingKeyRevokeEvent;
(function (StreamingKeyRevokeEvent) {
    StreamingKeyRevokeEvent.schema = (0, utils_1.createEventSchema)(base_1.Events.Type.STREAMING, base_1.Events.SubType.Streaming.STREAMING_KEY_REVOKE, streamingMetadataSchema);
    StreamingKeyRevokeEvent.validate = (0, validation_1.generateLazyValidator)(StreamingKeyRevokeEvent.schema);
})(StreamingKeyRevokeEvent = exports.StreamingKeyRevokeEvent || (exports.StreamingKeyRevokeEvent = {}));
var StreamingKeyExpiredEvent;
(function (StreamingKeyExpiredEvent) {
    StreamingKeyExpiredEvent.schema = (0, utils_1.createEventSchema)(base_1.Events.Type.STREAMING, base_1.Events.SubType.Streaming.STREAMING_KEY_EXPIRED, streamingMetadataSchema);
    StreamingKeyExpiredEvent.validate = (0, validation_1.generateLazyValidator)(StreamingKeyExpiredEvent.schema);
})(StreamingKeyExpiredEvent = exports.StreamingKeyExpiredEvent || (exports.StreamingKeyExpiredEvent = {}));
var StreamingTimeExceededEvent;
(function (StreamingTimeExceededEvent) {
    StreamingTimeExceededEvent.schema = (0, utils_1.createEventSchema)(base_1.Events.Type.STREAMING, base_1.Events.SubType.Streaming.STREAMING_TIME_EXCEEDED, streamingMetadataSchema);
    StreamingTimeExceededEvent.validate = (0, validation_1.generateLazyValidator)(StreamingTimeExceededEvent.schema);
})(StreamingTimeExceededEvent = exports.StreamingTimeExceededEvent || (exports.StreamingTimeExceededEvent = {}));
var StreamingPlaceUpdatedEvent;
(function (StreamingPlaceUpdatedEvent) {
    StreamingPlaceUpdatedEvent.schema = (0, utils_1.createEventSchema)(base_1.Events.Type.STREAMING, base_1.Events.SubType.Streaming.STREAMING_PLACE_UPDATED, streamingMetadataSchema);
    StreamingPlaceUpdatedEvent.validate = (0, validation_1.generateLazyValidator)(StreamingPlaceUpdatedEvent.schema);
})(StreamingPlaceUpdatedEvent = exports.StreamingPlaceUpdatedEvent || (exports.StreamingPlaceUpdatedEvent = {}));
//# sourceMappingURL=streaming.js.map