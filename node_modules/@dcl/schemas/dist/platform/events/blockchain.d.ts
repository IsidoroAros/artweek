import { JSONSchema, ValidateFunction } from '../../validation';
import { BaseEvent, Events } from './base';
export type BidEventMetadata = {
    address: string;
    image: string;
    seller: string;
    category: string;
    rarity?: string;
    link: string;
    nftName?: string;
    price: string;
    title: string;
    description: string;
    network: string;
};
export type BidAcceptedEvent = BaseEvent & {
    type: Events.Type.BLOCKCHAIN;
    subType: Events.SubType.Blockchain.BID_ACCEPTED;
    metadata: BidEventMetadata;
};
export declare namespace BidAcceptedEvent {
    const schema: JSONSchema<BidAcceptedEvent>;
    const validate: ValidateFunction<BidAcceptedEvent>;
}
export type ItemSoldEvent = BaseEvent & {
    type: Events.Type.BLOCKCHAIN;
    subType: Events.SubType.Blockchain.ITEM_SOLD;
    metadata: {
        address: string;
        image: string;
        buyer: string;
        seller: string;
        category: string;
        rarity?: string;
        link: string;
        nftName?: string;
        tokenId: string;
        network: string;
        title: string;
        description: string;
    };
};
export type ItemPublishedEvent = BaseEvent & {
    type: Events.Type.BLOCKCHAIN;
    subType: Events.SubType.Blockchain.ITEM_PUBLISHED;
    metadata: {
        creator: string;
        category: string;
        itemId: string;
        urn: string;
        network: string;
        rarity?: string;
    };
};
export declare namespace ItemSoldEvent {
    const schema: JSONSchema<ItemSoldEvent>;
    const validate: ValidateFunction<ItemSoldEvent>;
}
export declare namespace ItemPublishedEvent {
    const schema: JSONSchema<ItemPublishedEvent>;
    const validate: ValidateFunction<ItemPublishedEvent>;
}
type RentalMetadata = {
    address: string;
    contract: string;
    land?: string;
    lessor: string;
    tenant: string;
    operator: string;
    startedAt: string;
    endedAt: string;
    tokenId: string;
    link: string;
    title: string;
    description?: string;
};
export type RentalEndedEvent = BaseEvent & {
    type: Events.Type.BLOCKCHAIN;
    subType: Events.SubType.Blockchain.RENTAL_ENDED;
    metadata: RentalMetadata;
};
export declare namespace RentalEndedEvent {
    const schema: JSONSchema<RentalEndedEvent>;
    const validate: ValidateFunction<RentalEndedEvent>;
}
export type RentalStartedEvent = BaseEvent & {
    type: Events.Type.BLOCKCHAIN;
    subType: Events.SubType.Blockchain.RENTAL_STARTED;
    metadata: RentalMetadata;
};
export declare namespace RentalStartedEvent {
    const schema: JSONSchema<RentalStartedEvent>;
    const validate: ValidateFunction<RentalStartedEvent>;
}
export type RoyaltiesEarnedEvent = BaseEvent & {
    type: Events.Type.BLOCKCHAIN;
    subType: Events.SubType.Blockchain.ROYALTIES_EARNED;
    metadata: {
        address: string;
        image: string;
        category: string;
        rarity?: string;
        link: string;
        nftName?: string;
        royaltiesCut: string;
        royaltiesCollector: string;
        network: string;
        title: string;
        description?: string;
    };
};
export declare namespace RoyaltiesEarnedEvent {
    const schema: JSONSchema<RoyaltiesEarnedEvent>;
    const validate: ValidateFunction<RoyaltiesEarnedEvent>;
}
export type CollectionCreatedEvent = BaseEvent & {
    type: Events.Type.BLOCKCHAIN;
    subType: Events.SubType.Blockchain.COLLECTION_CREATED;
    metadata: {
        creator: string;
        name: string;
    };
};
export declare namespace CollectionCreatedEvent {
    const schema: JSONSchema<CollectionCreatedEvent>;
    const validate: ValidateFunction<CollectionCreatedEvent>;
}
export {};
//# sourceMappingURL=blockchain.d.ts.map