import { DependencyList } from "react";
type AsyncStateOptions<T = any, I = null> = {
    initialValue: T | I;
    callWithTruthyDeps: boolean;
};
type AsyncStateResultState<T, I = null> = {
    version: number;
    time: number;
    error: Error | null;
    loading: boolean;
    loaded: boolean;
    reload: () => void;
    set: (value: ((current: T | I) => T) | T) => void;
};
type AsyncStateResult<T, I = null> = readonly [
    T | I,
    AsyncStateResultState<T, I>
];
/**
 * Create a state object for the useAsyncState hook
 * @param initialValue - The initial value of the state
 * @param callWithTruthyDeps - Whether to call the async function only when all dependencies are truthy
 * @returns An object with the state properties
 */
declare const createAsyncStateState: <T, I = null>() => AsyncStateResultState<T, I>;
/**
 * Execute and async function and save the result in the component memory,
 * it will execute again each time deps change, and it return only the result
 * for the latest change
 *
 * @param callback - async function
 * @param deps - dependency list
 * @param options.initialValue - initial memo value (default=null)
 * @param options.callWithTruthyDeps - if true the effect will be executed only when
 *   all values in the dependency list are evaluated as true
 */
declare const useAsyncState: <T, I = null>(callback: () => Promise<T>, deps?: DependencyList, options?: Partial<AsyncStateOptions<T, I>>) => AsyncStateResult<T, I>;
export type { AsyncStateResultState, AsyncStateResult };
export { createAsyncStateState, useAsyncState };
