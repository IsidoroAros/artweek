"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAdvancedUserAgentData = useAdvancedUserAgentData;
const tslib_1 = require("tslib");
const react_1 = require("react");
const ua_parser_js_1 = require("ua-parser-js");
const helpers_1 = require("ua-parser-js/helpers");
const useAsyncEffect_1 = require("./useAsyncEffect");
const DEFAULT_VALUE = "Unknown";
/**
 * extract or infer the [UserAgentData](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/userAgentData)
 * that is an object which can be used to access the User-Agent Client Hints API.
 */
function useAdvancedUserAgentData() {
    const [isLoading, setLoading] = (0, react_1.useState)(true);
    const [data, setData] = (0, react_1.useState)();
    (0, useAsyncEffect_1.useAsyncEffect)(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f;
        setLoading(true);
        const ua = new ua_parser_js_1.UAParser(navigator.userAgent);
        const uaData = ua.getResult();
        const browser = {
            name: (_a = uaData.browser.name) !== null && _a !== void 0 ? _a : DEFAULT_VALUE,
            version: (_b = uaData.browser.version) !== null && _b !== void 0 ? _b : DEFAULT_VALUE,
        };
        const engine = {
            name: (_c = uaData.engine.name) !== null && _c !== void 0 ? _c : DEFAULT_VALUE,
            version: (_d = uaData.engine.version) !== null && _d !== void 0 ? _d : DEFAULT_VALUE,
        };
        const [uaDataWithClientHints, osData, cpuData] = yield Promise.all([
            uaData.withClientHints(),
            ua.getOS().withClientHints(),
            ua.getCPU().withClientHints(),
        ]);
        const os = {
            name: (_e = osData.name) !== null && _e !== void 0 ? _e : DEFAULT_VALUE,
            version: (_f = osData.version) !== null && _f !== void 0 ? _f : DEFAULT_VALUE,
        };
        let architecture;
        if (!cpuData.architecture) {
            architecture =
                os.name === "macOS" && (0, helpers_1.isAppleSilicon)(uaDataWithClientHints)
                    ? "arm64"
                    : "Unknown";
        }
        else {
            architecture = cpuData.architecture;
        }
        setData({
            browser,
            engine,
            os,
            cpu: {
                architecture,
            },
            mobile: ua.getDevice().is("mobile"),
            tablet: ua.getDevice().is("tablet"),
        });
        setLoading(false);
    }), []);
    return [isLoading, data];
}
//# sourceMappingURL=useAdvancedUserAgentData.js.map