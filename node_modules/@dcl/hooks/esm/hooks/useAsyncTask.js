/* eslint-disable @typescript-eslint/no-explicit-any */
import { useCallback, useEffect, useState } from "react";
import { sentry } from "../utils/development/sentry";
/**
 * Execute an async function and return a loading state and a function to call the async function
 * @param callback - The async function to execute
 * @param deps - The dependencies of the async function
 * @returns A tuple containing the loading state and a function to call the async function
 */
const useAsyncTask = (callback, deps) => {
    const [{ loading, args }, setLoading] = useState({
        loading: false,
        args: null,
    });
    useEffect(() => {
        if (!loading) {
            return;
        }
        if (args === null) {
            return;
        }
        let cancelled = false;
        Promise.resolve()
            .then(() => callback(...args))
            .then(() => {
            if (cancelled) {
                return;
            }
            setLoading({ loading: false, args: null });
        })
            .catch((err) => {
            console.error(err);
            sentry((sentry) => sentry.captureException(err));
            if (cancelled) {
                return;
            }
            setLoading({ loading: false, args: null });
        });
        return () => {
            cancelled = true;
        };
    }, [loading]);
    const callTask = useCallback((...args) => {
        setLoading({ loading: true, args });
    }, [loading, args, ...deps]);
    return [loading, callTask];
};
export { useAsyncTask };
//# sourceMappingURL=useAsyncTask.js.map