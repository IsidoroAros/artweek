import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React, { useCallback, useEffect, useRef } from "react";
import Box from "@mui/material/Box";
import * as blockies from "ethereum-blockies/blockies";
import { StyledBlockieChildrenWrapper, StyledCanvas } from "./Blockie.styled";
const Blockie = React.memo((props) => {
    const { seed, color = "#e449c2", spotcolor = "#e449c2", bgcolor = "#3149de", size = 6, scale = 6, children, } = props;
    const canvasRef = useRef(null);
    const getOpts = useCallback(() => ({
        seed: seed ? seed.toLowerCase() : "",
        color,
        spotcolor,
        bgcolor,
        size,
        scale,
    }), [seed, color, spotcolor, bgcolor, size, scale]);
    const draw = useCallback(() => {
        if (!canvasRef || !canvasRef.current)
            return;
        const ctx = canvasRef.current.getContext("2d");
        if (ctx) {
            ctx.clearRect(0, 0, size * scale, size * scale);
            blockies.render(getOpts(), canvasRef.current);
        }
    }, [getOpts, size, scale]);
    useEffect(() => {
        draw();
    }, [draw]);
    const canvas = _jsx(StyledCanvas, { scale: scale, size: size, ref: canvasRef });
    return children ? (_jsxs(Box, { component: "span", children: [canvas, _jsx(StyledBlockieChildrenWrapper, { component: "span", children: children })] })) : (canvas);
});
export { Blockie };
//# sourceMappingURL=Blockie.js.map