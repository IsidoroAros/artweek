import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { documentToReactComponents } from "@contentful/rich-text-react-renderer";
import { ContentfulLocale } from "@dcl/schemas";
import CircularProgress from "@mui/material/CircularProgress";
import { getAssetUrl } from "../../modules/contentful";
import { useTabletAndBelowMediaQuery } from "../Media";
import { BannerContainer, Button, ButtonContainer, Content, LoadingContainer, Logo, Text, Title, } from "./Banner.styled";
const convertAlignmentToFlex = (alignment) => {
    switch (alignment) {
        case "left":
            return "flex-start";
        case "center":
            return "center";
        case "right":
            return "flex-end";
        default:
            return "flex-start";
    }
};
export const Banner = (props) => {
    const { isLoading, onClick, fields, assets, locale = ContentfulLocale.enUS, error, } = props;
    const isMobileOrTablet = useTabletAndBelowMediaQuery();
    if (isLoading) {
        return (_jsx(LoadingContainer, { children: _jsx(CircularProgress, {}) }));
    }
    // If there is no banner fields or the banner is not supposed to be shown, return null
    if (!fields || error) {
        return null;
    }
    // Build the parameters based on the size of the screen
    const bannerBackgroundImage = getAssetUrl(assets, ContentfulLocale.enUS, isMobileOrTablet
        ? fields.mobileBackground[ContentfulLocale.enUS]
        : fields.fullSizeBackground[ContentfulLocale.enUS]);
    const title = isMobileOrTablet
        ? fields.mobileTitle[locale]
        : fields.desktopTitle[locale];
    const titleAlignment = (isMobileOrTablet
        ? fields.mobileTitleAlignment[ContentfulLocale.enUS]
        : fields.desktopTitleAlignment[ContentfulLocale.enUS])?.toLowerCase();
    const text = isMobileOrTablet
        ? fields.mobileText[locale]
        : fields.desktopText[locale];
    const textAlignment = (isMobileOrTablet
        ? fields.mobileTextAlignment[ContentfulLocale.enUS]
        : fields.desktopTextAlignment[ContentfulLocale.enUS])?.toLowerCase();
    const buttonAlignment = convertAlignmentToFlex((isMobileOrTablet
        ? fields.mobileButtonAlignment[ContentfulLocale.enUS]
        : fields.desktopButtonAlignment[ContentfulLocale.enUS])?.toLowerCase());
    return (_jsxs(BannerContainer, { background: bannerBackgroundImage, children: [_jsxs(Content, { children: [_jsx(Title, { variant: "h1", textAlign: titleAlignment, children: title }), _jsx(Text, { textAlign: textAlignment, children: text ? documentToReactComponents(text) : null }), fields.showButton[ContentfulLocale.enUS] &&
                        fields.buttonLink?.[ContentfulLocale.enUS] &&
                        fields.buttonsText?.[locale] ? (_jsx(ButtonContainer, { justifyContent: buttonAlignment, children: _jsx(Button, { onClick: onClick, href: fields.buttonLink[ContentfulLocale.enUS], variant: "contained", disableElevation: true, children: fields.buttonsText[locale] }) })) : null] }), fields.logo && fields.logo[ContentfulLocale.enUS] && (_jsx(Logo, { src: getAssetUrl(assets, ContentfulLocale.enUS, fields.logo[ContentfulLocale.enUS]), alt: "Banner logo" }))] }));
};
//# sourceMappingURL=Banner.js.map