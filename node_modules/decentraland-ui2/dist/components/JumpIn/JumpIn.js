import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React, { useCallback, useState } from "react";
import { Typography } from "@mui/material";
import { launchDesktopApp } from "../../modules/jumpIn";
import { JumpInIcon, LocationIcon } from "../Icon";
import { DownloadModal } from "../Modal/DownloadModal";
import { LocationIconContainer, StyledContainer, StyledIcon, StyledJumpInButton, StyledJumpInLink, StyledPosition, } from "./JumpIn.styled";
const DEFAULT_DOWNLOAD_URL = "https://decentraland.org/download";
const JumpIn = React.memo((props) => {
    const { position, compact, loading, buttonText = "Jump In", downloadUrl = DEFAULT_DOWNLOAD_URL, modalProps, desktopAppOptions = {}, onTrack, } = props;
    const [isModalOpen, setIsModalOpen] = useState(false);
    const handleClick = useCallback(async (e) => {
        e.stopPropagation();
        e.preventDefault();
        const hasLauncher = await launchDesktopApp(desktopAppOptions);
        !hasLauncher && setIsModalOpen(true);
        onTrack?.({
            has_launcher: hasLauncher,
        });
    }, [onTrack, desktopAppOptions]);
    const handleDownloadClick = useCallback((e) => {
        e.stopPropagation();
        e.preventDefault();
        window.open(downloadUrl, "_blank");
    }, [downloadUrl]);
    if (props.variant === "button") {
        return (_jsxs(_Fragment, { children: [_jsxs(StyledJumpInButton, { ...props.buttonProps, onClick: handleClick, disabled: loading, size: "small", variant: "contained", children: [_jsx("span", { children: buttonText }), _jsx(JumpInIcon, {})] }), _jsx(DownloadModal, { ...modalProps, open: isModalOpen, onClose: () => setIsModalOpen(false), onDownloadClick: handleDownloadClick })] }));
    }
    return (_jsxs(_Fragment, { children: [_jsx(StyledJumpInLink, { ...props.linkProps, onClick: handleClick, target: "_blank", rel: "noopener noreferrer", children: _jsxs(StyledContainer, { children: [_jsxs(StyledPosition, { compact: compact, children: [position && (_jsx(LocationIconContainer, { children: _jsx(LocationIcon, { htmlColor: "inherit", fontSize: "inherit" }) })), _jsx(Typography, { component: "span", children: position })] }), _jsx(StyledIcon, { children: _jsx(JumpInIcon, {}) })] }) }), _jsx(DownloadModal, { ...modalProps, open: isModalOpen, onClose: () => setIsModalOpen(false), onDownloadClick: handleDownloadClick })] }));
});
export { JumpIn };
//# sourceMappingURL=JumpIn.js.map