import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from "react";
import { Box, Button, Checkbox, FormControlLabel, TextField, Typography, } from "@mui/material";
import { Modal, ModalContent } from "./Modal";
import { Mana } from "../Mana";
const meta = {
    component: Modal,
    title: "Decentraland UI/Modal",
    tags: ["autodocs"],
    argTypes: {
        size: {
            description: "Size of the Modal",
            control: "radio",
            options: ["tiny", "small", "medium", "large"],
        },
    },
    render: (args) => (_jsx(Box, { sx: { height: "400px" }, children: _jsx(ModalContent, { ...args, children: args.children }) })),
};
const Simple = {
    args: {
        open: false,
        title: "Are you sure?",
        children: (_jsx(_Fragment, { children: _jsxs(Typography, { variant: "body1", children: ["You are about to sell your soul for", " ", _jsx(Mana, { inline: true, children: (2500).toLocaleString() }), "."] }) })),
        actions: (_jsxs(_Fragment, { children: [_jsx(Button, { color: "primary", variant: "contained", children: "Proceed" }), _jsx(Button, { variant: "outlined", children: "Cancel" })] })),
    },
};
const Actionable = {
    args: {
        title: "Are you sure?",
        children: (_jsx(_Fragment, { children: _jsxs(Typography, { variant: "body1", children: ["You are about to sell your soul for", " ", _jsx(Mana, { inline: true, children: (2500).toLocaleString() }), "."] }) })),
        actions: (_jsxs(_Fragment, { children: [_jsx(Button, { color: "primary", variant: "contained", children: "Proceed" }), _jsx(Button, { variant: "outlined", children: "Cancel" })] })),
    },
    render: (args) => {
        const [open, setOpen] = useState(false);
        return (_jsxs(Box, { sx: { height: "400px" }, children: [_jsx(Button, { onClick: () => setOpen(true), variant: "contained", children: "Open Modal" }), _jsx(Modal, { ...args, open: open, onClose: () => setOpen(false) })] }));
    },
};
const Tiny = {
    args: {
        open: false,
        size: "tiny",
        title: "Are you sure?",
        children: (_jsxs(_Fragment, { children: ["You are about to sell your soul for", " ", _jsx(Mana, { inline: true, children: (2500).toLocaleString() }), "."] })),
        actions: (_jsxs(_Fragment, { children: [_jsx(Button, { color: "primary", variant: "contained", children: "Proceed" }), _jsx(Button, { variant: "outlined", children: "Cancel" })] })),
    },
};
const Small = {
    args: {
        open: false,
        size: "small",
        title: "Are you sure?",
        children: (_jsxs(_Fragment, { children: ["You are about to sell your soul for", " ", _jsx(Mana, { inline: true, children: (2500).toLocaleString() }), "."] })),
        actions: (_jsxs(_Fragment, { children: [_jsx(Button, { color: "primary", variant: "contained", children: "Proceed" }), _jsx(Button, { variant: "outlined", children: "Cancel" })] })),
    },
};
const CustomHeader = {
    name: "Custom Header",
    args: {
        open: false,
        header: (_jsxs(Box, { sx: {
                height: "200px",
                backgroundColor: "#123",
                color: "#fff",
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
            }, children: [_jsx(Typography, { variant: "h4", children: "Give us your email!" }), _jsx("p", { children: "We need to feed our marketing gnomes" })] })),
        children: (_jsxs(_Fragment, { children: ["You are about to sell your soul for", " ", _jsx(Mana, { inline: true, children: (2500).toLocaleString() }), "."] })),
        actions: (_jsxs(_Fragment, { children: [_jsx(Button, { color: "primary", variant: "contained", children: "Proceed" }), _jsx(Button, { variant: "outlined", children: "Cancel" })] })),
    },
};
const Form = {
    args: {
        open: false,
        title: "Are you sure?",
        children: (_jsx(_Fragment, { children: _jsxs(Box, { sx: { display: "flex", flexDirection: "column", gap: "16px" }, children: [_jsx(TextField, { label: "Name", variant: "standard", placeholder: "Luis XVII" }), _jsx(TextField, { label: "Email", variant: "standard", placeholder: "luigi@mail.com" }), _jsx(FormControlLabel, { control: _jsx(Checkbox, { defaultChecked: true }), label: "Check me" })] }) })),
        actions: (_jsxs(_Fragment, { children: [_jsx(Button, { color: "primary", variant: "contained", children: "Proceed" }), _jsx(Button, { variant: "outlined", children: "Cancel" })] })),
    },
};
const Closable = {
    args: {
        open: false,
        title: "Are you sure?",
        onClose: () => alert("Close!"),
        children: (_jsx(_Fragment, { children: _jsxs(Box, { sx: { display: "flex", flexDirection: "column", gap: "16px" }, children: [_jsx(TextField, { label: "Name", variant: "standard", placeholder: "Luis XVII" }), _jsx(TextField, { label: "Email", variant: "standard", placeholder: "luigi@mail.com" }), _jsx(FormControlLabel, { control: _jsx(Checkbox, { defaultChecked: true }), label: "Check me" })] }) })),
        actions: (_jsxs(_Fragment, { children: [_jsx(Button, { color: "primary", variant: "contained", children: "Proceed" }), _jsx(Button, { variant: "outlined", children: "Cancel" })] })),
    },
};
const Navigation = {
    args: {
        open: false,
        title: "Are you sure?",
        onClose: () => alert("Close!"),
        onBack: () => alert("Back!"),
        children: (_jsx(_Fragment, { children: _jsxs(Box, { sx: { display: "flex", flexDirection: "column", gap: "16px" }, children: [_jsx(TextField, { label: "Name", variant: "standard", placeholder: "Luis XVII" }), _jsx(TextField, { label: "Email", variant: "standard", placeholder: "luigi@mail.com" }), _jsx(FormControlLabel, { control: _jsx(Checkbox, { defaultChecked: true }), label: "Check me" })] }) })),
        actions: (_jsxs(_Fragment, { children: [_jsx(Button, { color: "primary", variant: "contained", children: "Proceed" }), _jsx(Button, { variant: "outlined", children: "Cancel" })] })),
    },
};
// eslint-disable-next-line import/no-default-export
export default meta;
export { Simple, Actionable, Tiny, Small, CustomHeader, Form, Closable, Navigation, };
//# sourceMappingURL=Modal.stories.js.map