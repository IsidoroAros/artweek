import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React from "react";
import { Network } from "@dcl/schemas";
import { Box, Tooltip } from "@mui/material";
import { config } from "../../../config";
import * as CreditsIcon from "../../Icon/CreditsIcon";
import { Mana } from "../../Mana";
import { CreditsBalanceContainer, CreditsBalanceTooltipContainer, CreditsBalanceValueContainer, ExperingSoon, GetCreditsButton, ManaBalanceNumber, ManaBalancesWrapper, } from "./ManaBalances.styled";
const ManaBalances = React.memo((props) => {
    const { manaBalances, creditsBalance, i18n, onClickBalance } = props;
    const isCreditsBalanceExpired = creditsBalance && creditsBalance.expiresAt < Date.now();
    const creditsExpiringSoon = creditsBalance &&
        creditsBalance.expiresAt < Date.now() + 1000 * 60 * 60 * 24 * 5; // 5 days
    // calculates in how much time they expire. This returns days remaining
    const creditsExpiringIn = creditsBalance &&
        Math.floor((creditsBalance.expiresAt - Date.now()) / (1000 * 60 * 60 * 24));
    return (_jsxs(ManaBalancesWrapper, { children: [_jsx(Box, { children: manaBalances &&
                    Object.keys(manaBalances).map((network) => (_jsx(Mana, { network: network, href: config.get("ACCOUNT_URL"), onClick: onClickBalance, primary: network === Network.ETHEREUM, children: _jsx(ManaBalanceNumber, { variant: "subtitle2", children: Number(manaBalances[network].toFixed(2)).toLocaleString() }) }, network))) }), creditsBalance !== undefined && !isCreditsBalanceExpired && (_jsx(CreditsBalanceContainer, { children: _jsx(_Fragment, { children: creditsBalance.balance === 0 ? (_jsxs(_Fragment, { children: [_jsx(GetCreditsButton, { variant: "text", onClick: () => {
                                    window.open(`${config.get("BLOG_URL")}announcements/marketplace-credits-earn-weekly-rewards-to-power-up-your-look?utm_org=dcl&utm_source=marketplace&utm_medium=organic&utm_campaign=marketplacecredits`, "_blank", "noopener noreferrer");
                                }, children: i18n?.getCredits || "Earn Credits" }), _jsxs(CreditsBalanceValueContainer, { children: [_jsx(CreditsIcon.CreditsIcon, {}), creditsBalance.balance] })] })) : creditsBalance.balance > 0 ? (_jsxs(_Fragment, { children: [creditsExpiringSoon && (_jsx(ExperingSoon, { children: i18n?.creditsExpiringSoon })), creditsExpiringIn && (_jsx(Tooltip, { title: _jsxs(CreditsBalanceTooltipContainer, { children: [_jsx("span", { children: i18n?.creditsExpiringIn(creditsExpiringIn.toString()) }), _jsx("span", { children: i18n?.creditsValue })] }), placement: "top-start", children: _jsxs(CreditsBalanceValueContainer, { children: [_jsx(CreditsIcon.CreditsIcon, {}), creditsBalance.balance] }) }))] })) : null }) }))] }));
});
export { ManaBalances };
//# sourceMappingURL=ManaBalances.js.map