import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import React, { useCallback, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { CircularProgress } from "@mui/material";
import { i18n as i18nUserMenu } from "./UserMenu.i18n";
import { UserMenuSignedIn } from "./UserMenuSignedIn/UserMenuSignedIn";
import { config } from "../../config";
import { DownloadButton } from "../DownloadButton";
import { UserMenuEventId } from "./UserMenu.types";
import { SignInButton, UserMenuContainer, UserMenuLoaderContainer, } from "./UserMenu.styled";
const UserMenu = React.memo((props) => {
    const { isSignedIn, isSigningIn, isDisconnecting, manaBalances, i18n = i18nUserMenu, hideDownloadButton, cdnLinks, onClickSignIn, onClickBalance, onClickOpen, onClickUserMenuItem, loadingCdnLinks = false, ...signInProps } = props;
    const [isOpen, setIsOpen] = useState(false);
    const [trackingId, setTrackingId] = useState(undefined);
    const handleToggle = useCallback((event) => {
        const trackId = uuidv4();
        setIsOpen((prev) => {
            if (!prev) {
                setTrackingId(trackId);
            }
            if (!prev && onClickOpen) {
                onClickOpen(event, trackId);
            }
            return !prev;
        });
    }, [setIsOpen, onClickOpen]);
    const handleClose = useCallback(() => {
        setIsOpen(false);
    }, [setIsOpen]);
    const handleClickSignIn = useCallback((event) => {
        event.preventDefault();
        onClickUserMenuItem &&
            onClickUserMenuItem(event, {
                type: UserMenuEventId.SIGN_IN,
                track_uuid: trackingId || undefined,
                url: config.get("MARKETPLACE_URL"),
            });
        onClickSignIn && onClickSignIn(event);
    }, [onClickSignIn, onClickUserMenuItem, trackingId]);
    const handleClickBalance = useCallback((event, network) => {
        event.preventDefault();
        onClickUserMenuItem &&
            onClickUserMenuItem(event, {
                type: UserMenuEventId.BALANCE,
            });
        setTimeout(() => {
            onClickBalance
                ? onClickBalance(event, network)
                : window.open(config.get("ACCOUNT_URL"), "_blank", "noopener");
        }, onClickUserMenuItem ? 300 : 0);
    }, [onClickBalance, onClickUserMenuItem, trackingId]);
    return (_jsx(UserMenuContainer, { children: isDisconnecting ? (_jsx(UserMenuLoaderContainer, { children: _jsx(CircularProgress, { size: 20 }) })) : (_jsxs(_Fragment, { children: [isSignedIn && (_jsx(UserMenuSignedIn, { ...signInProps, manaBalances: manaBalances, trackingId: trackingId, isOpen: isOpen, i18n: i18n, onClickToggle: handleToggle, onClickClose: handleClose, onClickUserMenuItem: onClickUserMenuItem, onClickBalance: handleClickBalance })), !isSignedIn ? (_jsx(SignInButton, { variant: "outlined", color: "inherit", disabled: isSigningIn, onClick: handleClickSignIn, children: isSigningIn ? (_jsx(CircularProgress, { size: 20, color: "inherit" })) : (i18n.signIn) })) : null, !hideDownloadButton && (_jsx(DownloadButton, { label: i18n.download, onClick: onClickUserMenuItem, trackingId: trackingId, loadingCdnLinks: loadingCdnLinks, cdnLinks: cdnLinks }))] })) }));
});
export { UserMenu };
//# sourceMappingURL=UserMenu.js.map