import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React, { useCallback, useMemo, useState } from "react";
import ArrowForwardIcon from "@mui/icons-material/ArrowForward";
import LogoutIcon from "@mui/icons-material/Logout";
import { Badge, Box, IconButton, Typography } from "@mui/material";
import { config } from "../../../config";
import { AvatarFace } from "../../AvatarFace";
import { useTabletAndBelowMediaQuery } from "../../Media";
import { Notifications } from "../../Notifications";
import { ManaBalances } from "../ManaBalances";
import { UserMenuEventId } from "../UserMenu.types";
import { ActionsContainer, ActionsListItemIcon, ActionsMenuItem, ActionsWrapper, ActivityIcon, AvatarFaceContainer, AvatarPreview, AvatarPreviewContainer, LogoutContainer, MenuContainer, MenuInfoContainer, MenuInfoTypography, MenuInfoUnclaimedTypography, MenuInformationActionContainer, UserMenuSignedInContainer, } from "./UserMenuSignedIn.styled";
const UserMenuActions = (props) => {
    const { avatar, address, i18n, trackingId, onClickMarketplaceAuthorization, onClickMyAssets, onClickProfile, onClickSignOut, onClickAccount, onClickUserMenuItem, balances, } = props;
    const isTabletAndBelow = useTabletAndBelowMediaQuery();
    const handleClickMyAssets = useCallback((event) => {
        onClickUserMenuItem &&
            onClickUserMenuItem(event, {
                type: UserMenuEventId.MY_ASSETS,
                track_uuid: trackingId,
                url: config.get("MARKETPLACE_MY_ASSETS_URL"),
            });
        setTimeout(() => {
            onClickMyAssets
                ? onClickMyAssets(event)
                : window.open(`${config.get("MARKETPLACE_MY_ASSETS_URL")}`, "_blank", "noopener");
        }, onClickUserMenuItem ? 300 : 0);
    }, [onClickMyAssets, onClickUserMenuItem, trackingId]);
    const handleClickMarketplaceAuthorization = useCallback((event) => {
        onClickUserMenuItem &&
            onClickUserMenuItem(event, {
                type: UserMenuEventId.MARKETPLACE_AUTHORIZATIONS,
                track_uuid: trackingId,
                url: config.get("MARKETPLACE_SETTINGS_URL"),
            });
        setTimeout(() => {
            onClickMarketplaceAuthorization
                ? onClickMarketplaceAuthorization(event)
                : window.open(`${config.get("MARKETPLACE_SETTINGS_URL")}`, "_blank", "noopener");
        }, onClickUserMenuItem ? 300 : 0);
    }, [onClickMarketplaceAuthorization, onClickUserMenuItem, trackingId]);
    const handleClickProfile = useCallback((event) => {
        onClickUserMenuItem &&
            onClickUserMenuItem(event, {
                type: UserMenuEventId.PROFILE,
                track_uuid: trackingId,
                url: config.get("PROFILE_URL"),
            });
        setTimeout(() => {
            onClickProfile
                ? onClickProfile(event)
                : window.open(config.get("PROFILE_URL"), "_blank", "noopener");
        }, onClickUserMenuItem ? 300 : 0);
    }, [onClickProfile, onClickUserMenuItem, trackingId]);
    const handleClickAccount = useCallback((event) => {
        onClickUserMenuItem &&
            onClickUserMenuItem(event, {
                type: UserMenuEventId.ACCOUNT,
                track_uuid: trackingId,
                url: config.get("ACCOUNT_URL"),
            });
        setTimeout(() => {
            onClickAccount
                ? onClickAccount(event)
                : window.open(config.get("ACCOUNT_URL"), "_blank", "noopener");
        }, onClickUserMenuItem ? 300 : 0);
    }, [onClickAccount, onClickUserMenuItem, trackingId]);
    const handleClickSignOut = useCallback((event) => {
        onClickUserMenuItem &&
            onClickUserMenuItem(event, {
                type: UserMenuEventId.SIGN_OUT,
                track_uuid: trackingId,
            });
        onClickSignOut && onClickSignOut(event, trackingId || "");
    }, [onClickSignOut, onClickUserMenuItem, trackingId]);
    const userAddress = useMemo(() => avatar?.ethAddress || address, [avatar, address]);
    return (_jsxs(ActionsContainer, { elevation: 0, children: [_jsx(AvatarPreviewContainer, { children: _jsx(AvatarPreview, { avatar: avatar }) }), _jsxs(MenuInformationActionContainer, { children: [_jsxs(MenuInfoContainer, { children: [_jsxs(MenuInfoTypography, { variant: "h4", children: [avatar?.name || i18n.guest, " ", !avatar?.hasClaimedName && userAddress && (_jsxs(MenuInfoUnclaimedTypography, { children: ["#", userAddress.substring(userAddress.length - 4)] }))] }), isTabletAndBelow && balances] }), _jsxs(ActionsWrapper, { children: [_jsxs(ActionsMenuItem, { onClick: handleClickProfile, children: [_jsx(Typography, { variant: "h6", children: i18n.viewProfile }), _jsx(ActionsListItemIcon, { children: _jsx(ArrowForwardIcon, {}) })] }), _jsxs(ActionsMenuItem, { onClick: handleClickMyAssets, children: [_jsx(Typography, { variant: "h6", children: i18n.myAssets }), _jsx(ActionsListItemIcon, { children: _jsx(ArrowForwardIcon, {}) })] }), _jsxs(ActionsMenuItem, { onClick: handleClickAccount, children: [_jsx(Typography, { variant: "h6", children: i18n.account }), _jsx(ActionsListItemIcon, { children: _jsx(ArrowForwardIcon, {}) })] }), _jsxs(ActionsMenuItem, { onClick: handleClickMarketplaceAuthorization, children: [_jsx(Typography, { variant: "h6", children: i18n.marketplaceAuthorizations }), _jsx(ActionsListItemIcon, { children: _jsx(ArrowForwardIcon, {}) })] })] }), _jsxs(LogoutContainer, { onClick: handleClickSignOut, children: [_jsx(Typography, { variant: "h6", children: i18n.signOut }), _jsx(LogoutIcon, {})] })] })] }));
};
const UserMenuSignedIn = React.memo((props) => {
    const { manaBalances, creditsBalance, avatar, hasActivity, isOpen, trackingId, notifications, onClickActivity, onClickBalance, onClickClose, onClickUserMenuItem, onClickToggle, ...actionsProps } = props;
    const [anchorEl, setAnchorEl] = useState(null);
    const isTabletAndBelow = useTabletAndBelowMediaQuery();
    const balances = useMemo(() => {
        return (_jsx(ManaBalances, { manaBalances: manaBalances, creditsBalance: creditsBalance, onClickBalance: onClickBalance, i18n: {
                getCredits: actionsProps.i18n?.getCredits,
                creditsExpiringSoon: actionsProps.i18n?.creditsExpiringSoon,
                creditsExpiringIn: actionsProps.i18n?.creditsExpiringIn,
                creditsValue: actionsProps.i18n?.creditsValue,
            } }));
    }, [manaBalances, creditsBalance]);
    const handleClickActivity = useCallback((event) => {
        onClickUserMenuItem &&
            onClickUserMenuItem(event, {
                type: UserMenuEventId.ACTIVITY,
                track_uuid: trackingId,
                url: `${config.get("MARKETPLACE_URL")}/activity`,
            });
        setTimeout(() => {
            onClickActivity
                ? onClickActivity(event)
                : window.open(`${config.get("MARKETPLACE_URL")}/activity`, "_blank", "noopener");
        }, onClickActivity ? 300 : 0);
    }, [onClickActivity, onClickUserMenuItem, trackingId]);
    const handleClickToggle = useCallback((event) => {
        onClickToggle && onClickToggle(event);
        setAnchorEl(event.currentTarget);
    }, [onClickToggle]);
    const handleClickClose = useCallback(() => {
        onClickClose && onClickClose();
    }, [onClickClose]);
    return (_jsxs(UserMenuSignedInContainer, { children: [notifications && _jsx(Notifications, { ...notifications }), !isTabletAndBelow && (_jsx(IconButton, { "aria-label": "activity", onClick: handleClickActivity, children: _jsx(Badge, { color: "secondary", variant: "dot", invisible: !hasActivity, children: _jsx(ActivityIcon, {}) }) })), !isTabletAndBelow && balances, _jsx(AvatarFaceContainer, { onClick: handleClickToggle, children: _jsx(AvatarFace, { size: "medium", avatar: avatar }) }), _jsxs(Box, { onMouseLeave: handleClickClose, onScroll: !isTabletAndBelow ? handleClickClose : undefined, children: [!isTabletAndBelow && (_jsx(MenuContainer, { anchorEl: anchorEl, open: !!isOpen, onClose: handleClickClose, anchorOrigin: {
                            vertical: "bottom",
                            horizontal: "right",
                        }, transformOrigin: {
                            vertical: "top",
                            horizontal: "right",
                        }, children: _jsx(UserMenuActions, { onClickUserMenuItem: onClickUserMenuItem, avatar: avatar, trackingId: trackingId, ...actionsProps }) })), isTabletAndBelow && isOpen && (_jsx(UserMenuActions, { balances: balances, onClickUserMenuItem: onClickUserMenuItem, avatar: avatar, trackingId: trackingId, ...actionsProps }))] })] }));
});
export { UserMenuSignedIn, UserMenuActions };
//# sourceMappingURL=UserMenuSignedIn.js.map