import { jsx as _jsx } from "react/jsx-runtime";
import { useState } from "react";
import { Box } from "@mui/material";
import { Notifications } from "./Notifications";
import { NotificationActiveTab } from "./types";
import { allTypeOfNotifications, bidAcceptedNotificationData, bidReceivedNotificationPropsData, campaignGasPriceHigherThanExpectedNotificationData, campaignOutOfFundsNotificationData, campaignOutOfStockNotificationData, creditsClaimReminderNotificationData, creditsCompleteYourWeeklyGoalsNotificationData, creditsDoNotMissOutNotificationData, creditsExpireIn24HrsReminderNotificationData, creditsExpireSoonReminderNotificationData, eventStartedNotificationData, eventStartsSoonFutureStartNotificationData, eventStartsSoonPastStartNotificationData, governanceAnnouncementNotificationData, governanceAuthoredProposalFinishedNotificationData, governanceCoauthorRequestedNotificationData, governanceNewCommentOnProjectUpdateNotificationData, governanceNewCommentOnProposalNotificationData, governancePitchPassedNotificationData, governanceProposalEnactedNotificationData, governanceTenderPassedNotificationData, governanceVotingEndedVoterNotificationData, itemSoldNotificationPropsData, landRentalEndedNotificationData, landRentedNotificationData, referralInvitedUserAcceptedNotificationData, referralNewTierReachedNotificationData, rewardAssignedNotificationData, rewardDelayedNotificationData, rewardInProgressNotificationData, royalitesEarnedNotificationPropsData, streamingKeyExpiredNotificationData, streamingKeyResetNotificationData, streamingKeyRevokeNotificationData, streamingPlaceUpdatedNotificationData, streamingTimeExceededNotificationData, worldsAccessRestoredNotificationData, worldsAccessRestrictedNotificationData, worldsMissingResourcesNotificationData, worldsPermissionGrantedNotificationPropsData, worldsPermissionRevokedNotificationData, } from "../../data/notifications";
import { shorten } from "../AddressField/utils";
const meta = {
    component: Notifications,
    title: "Decentraland UI/Notifications Toggle",
    tags: ["autodocs"],
    argTypes: {},
    render: (args) => {
        const [tab, setTab] = useState(NotificationActiveTab.NEWEST);
        const [open, setOpen] = useState(false);
        return (_jsx(Box, { sx: {
                height: "35px",
                width: "200px",
                display: "flex",
                justifyContent: "center",
                backgroundColor: ({ palette }) => palette.mode === "light" ? "#f0f0f0" : "#1a091c",
            }, children: _jsx(Notifications, { isOpen: open, isLoading: false, isOnboarding: false, items: [], locale: "en", activeTab: tab, onChangeTab: (_e, newTab) => setTab(newTab), onClick: () => setOpen(!open), onBegin: () => console.log("Begin"), onClose: () => setOpen(open), ...args }) }));
    },
};
const WithoutNewNotifications = {
    name: "Without new notifications",
    args: {
        items: [],
    },
};
const WithNewNotifications = {
    name: "With new notifications",
    args: {
        items: [itemSoldNotificationPropsData],
    },
};
const Onboarding = {
    name: "Onboarding",
    args: {
        isOnboarding: true,
        items: [eventStartedNotificationData],
    },
};
const OpenLoading = {
    name: "Open but loading",
    args: {
        isLoading: true,
        items: [],
    },
};
const OpenNotLoadingButEmpty = {
    name: "Open not loading but empty",
    args: {
        items: [],
    },
};
const EventsNotifications = {
    name: "Events Notifications",
    args: {
        items: [
            eventStartedNotificationData,
            { ...eventStartsSoonFutureStartNotificationData, read: false },
            eventStartsSoonPastStartNotificationData,
        ],
    },
};
const GovernanceNotifications = {
    name: "Governance Notifications",
    args: {
        items: [
            { ...governanceAnnouncementNotificationData, read: false },
            governanceAuthoredProposalFinishedNotificationData,
            governanceCoauthorRequestedNotificationData,
            governanceNewCommentOnProjectUpdateNotificationData,
            governanceNewCommentOnProposalNotificationData,
            governancePitchPassedNotificationData,
            governanceProposalEnactedNotificationData,
            governanceTenderPassedNotificationData,
            governanceVotingEndedVoterNotificationData,
        ],
    },
};
const LandNotifications = {
    name: "Land Notifications",
    args: {
        items: [
            { ...landRentalEndedNotificationData, read: false },
            landRentedNotificationData,
        ],
        renderProfile: (address) => shorten(address),
    },
};
const MarketplaceNotifications = {
    name: "Marketplace Notifications",
    args: {
        items: [
            { ...bidAcceptedNotificationData, read: false },
            bidReceivedNotificationPropsData,
            itemSoldNotificationPropsData,
            royalitesEarnedNotificationPropsData,
        ],
    },
};
const RewardsNotifications = {
    name: "Rewards Notifications",
    args: {
        items: [
            rewardAssignedNotificationData,
            rewardInProgressNotificationData,
            rewardDelayedNotificationData,
            campaignOutOfFundsNotificationData,
            campaignOutOfStockNotificationData,
            campaignGasPriceHigherThanExpectedNotificationData,
        ],
    },
};
const CreditsNotifications = {
    name: "Credits Notifications",
    args: {
        items: [
            creditsCompleteYourWeeklyGoalsNotificationData,
            creditsDoNotMissOutNotificationData,
            creditsClaimReminderNotificationData,
            creditsExpireSoonReminderNotificationData,
            creditsExpireIn24HrsReminderNotificationData,
        ],
    },
};
const ReferralNotifications = {
    name: "Referral Notifications",
    args: {
        items: [
            referralNewTierReachedNotificationData,
            referralInvitedUserAcceptedNotificationData,
        ],
    },
};
const StreamingNotifications = {
    name: "Streaming Notifications",
    args: {
        items: [
            streamingKeyExpiredNotificationData,
            streamingKeyResetNotificationData,
            streamingKeyRevokeNotificationData,
            streamingPlaceUpdatedNotificationData,
            streamingTimeExceededNotificationData,
        ],
    },
};
const WorldsNotifications = {
    name: "Worlds Notifications",
    args: {
        items: [
            worldsAccessRestoredNotificationData,
            worldsAccessRestrictedNotificationData,
            worldsMissingResourcesNotificationData,
            worldsPermissionGrantedNotificationPropsData,
            worldsPermissionRevokedNotificationData,
        ],
    },
};
const OpenNotLoading = {
    name: "Open not loading",
    args: {
        items: allTypeOfNotifications,
    },
};
const OnlySeen = {
    name: "Only seen",
    args: {
        items: allTypeOfNotifications.map((n) => {
            const pastStartDate = new Date();
            pastStartDate.setFullYear(pastStartDate.getFullYear() - 1);
            return { ...n, read: true, timestamp: pastStartDate.getTime() };
        }),
    },
};
// eslint-disable-next-line import/no-default-export
export default meta;
export { WithoutNewNotifications, WithNewNotifications, Onboarding, OpenLoading, OpenNotLoadingButEmpty, EventsNotifications, GovernanceNotifications, LandNotifications, MarketplaceNotifications, RewardsNotifications, CreditsNotifications, ReferralNotifications, StreamingNotifications, WorldsNotifications, OpenNotLoading, OnlySeen, };
//# sourceMappingURL=Notifications.stories.js.map