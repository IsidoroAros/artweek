import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import React, { useCallback, useMemo, useState } from "react";
import { NotificationsFeed } from "./NotificationsFeed";
import { NotificationBellActiveIcon, NotificationBellIcon } from "../Icon";
import { NotificationIconContainer, NotificationIconWrapper, } from "./Notifications.styled";
const Notifications = React.memo((props) => {
    const { isOpen, items, isLoading, locale, isOnboarding, activeTab, renderProfile, onClick, onChangeTab, onBegin, onClose, } = props;
    const newNotificationsCount = useMemo(() => {
        return items.filter((notification) => !notification.read).length;
    }, [items]);
    const [anchorEl, setAnchorEl] = useState(null);
    const handleClick = useCallback((event) => {
        onClick(event);
        setAnchorEl(event.currentTarget);
    }, []);
    const handleClose = useCallback((event) => {
        onClose(event);
        setAnchorEl(null);
    }, []);
    return (_jsxs(_Fragment, { children: [_jsx(NotificationIconContainer, { active: newNotificationsCount > 0, onClick: handleClick, badgeContent: newNotificationsCount, color: "primary", anchorOrigin: {
                    vertical: "top",
                    horizontal: "right",
                }, invisible: newNotificationsCount === 0, children: !isOpen ? (_jsx(NotificationIconWrapper, { children: _jsx(NotificationBellIcon, { fontSize: "large", color: "primary" }) })) : (_jsx(NotificationBellActiveIcon, { fontSize: "large", color: "primary" })) }), isOpen && (_jsx(NotificationsFeed, { isOpen: isOpen, items: items, isLoading: isLoading, locale: locale, isOnboarding: isOnboarding, activeTab: activeTab, onChangeTab: onChangeTab, onBegin: onBegin, onClose: handleClose, renderProfile: renderProfile, anchorEl: anchorEl }))] }));
});
export { Notifications };
//# sourceMappingURL=Notifications.js.map