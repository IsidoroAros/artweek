import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React, { useEffect, useMemo } from "react";
import CircleNotificationsRoundedIcon from "@mui/icons-material/CircleNotificationsRounded";
import { differenceInHours } from "date-fns";
import { Button, CircularProgress } from "@mui/material";
import { i18n } from "./NotificationsFeed.i18n";
import { NotificationFeedTabs } from "./NotificationsFeedTabs";
import { i18n as i18nTabs } from "./NotificationsFeedTabs.i18n";
import { Mobile, NotMobile } from "../Media";
import { EmptyViewDescription, EmptyViewTitle, FeedContainer, LoadingContainer, NotificationFeedContainer, NotificationFeedModal, NotificationFeedModalContainer, OnboardingWrapper, } from "./NotificationsFeed.styled";
const Onboarding = ({ locale, onBegin, }) => (_jsx(FeedContainer, { children: _jsxs(OnboardingWrapper, { children: [_jsx(CircleNotificationsRoundedIcon, { sx: { fontSize: 120 } }), _jsx(EmptyViewTitle, { color: "text.primary", children: i18n[locale].onboarding.title }), _jsx(EmptyViewDescription, { children: i18n[locale].onboarding.description }), _jsx(Button, { variant: "outlined", size: "small", color: "inherit", onClick: onBegin, children: i18n[locale].onboarding.button })] }) }));
const NotificationsFeed = React.memo((props) => {
    const { items, isLoading, locale, isOnboarding, activeTab, isOpen, anchorEl, renderProfile, onChangeTab, onBegin, onClose, } = props;
    const unreadNotifications = useMemo(() => items.filter((notification) => !notification.read), [items]);
    const previousNotifications = useMemo(() => items.filter((notification) => {
        const diff = differenceInHours(notification.timestamp, new Date());
        return notification.read && diff >= -48 && diff <= 0;
    }), [items]);
    const readNotifications = useMemo(() => items.filter((notification) => notification.read &&
        !previousNotifications.find(({ id }) => id === notification.id)), [items, previousNotifications]);
    useEffect(() => {
        function handleClickOutside(event) {
            const element = document.querySelector(".notifications-feed");
            if (element && !element.contains(event.target)) {
                event.preventDefault();
                event.stopPropagation();
                onClose(event);
            }
        }
        if (isOpen) {
            document.addEventListener("mousedown", handleClickOutside);
        }
        else {
            document.removeEventListener("mousedown", handleClickOutside);
        }
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [isOpen]);
    return (_jsxs(_Fragment, { children: [_jsx(Mobile, { children: _jsx(NotificationFeedModal, { open: isOpen, onClose: onClose, title: i18nTabs[locale].feed.title, children: isOnboarding ? (_jsx(Onboarding, { locale: locale, onBegin: onBegin })) : (_jsx(NotificationFeedModalContainer, { children: _jsx(NotificationFeedTabs, { locale: locale, previousNotifications: previousNotifications, readNotifications: readNotifications, unreadNotifications: unreadNotifications, onChangeTab: onChangeTab, activeTab: activeTab, isModal: true, renderProfile: renderProfile }) })) }) }), _jsx(NotMobile, { children: _jsx(NotificationFeedContainer, { anchorEl: anchorEl, open: !!isOpen, onClose: onClose, anchorOrigin: {
                        vertical: "bottom",
                        horizontal: "center",
                    }, transformOrigin: {
                        vertical: "top",
                        horizontal: "center",
                    }, elevation: 24, children: isLoading ? (_jsx(LoadingContainer, { children: _jsx(CircularProgress, { size: 20 }) })) : isOnboarding ? (_jsx(Onboarding, { locale: locale, onBegin: onBegin })) : (_jsx(NotificationFeedTabs, { locale: locale, previousNotifications: previousNotifications, readNotifications: readNotifications, unreadNotifications: unreadNotifications, onChangeTab: onChangeTab, activeTab: activeTab, renderProfile: renderProfile })) }) })] }));
});
export { NotificationsFeed };
//# sourceMappingURL=NotificationsFeed.js.map