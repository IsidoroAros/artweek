import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React, { useCallback } from "react";
import { Tab, Tabs } from "@mui/material";
import { i18n } from "./NotificationsFeedTabs.i18n";
import { NotificationActiveTab } from "./types";
import { NotificationComponentByType } from "./utils";
import { EmptyInboxIcon, HistoryIcon } from "../Icon";
import { NotMobile } from "../Media";
import { EmptyViewContainer, EmptyViewDescription, EmptyViewTitle, } from "./NotificationsFeed.styled";
import { NotificationFeedPrevious, NotificationFeedTabsContainer, NotificationFeedTabsContent, NotificationFeedTabsHeader, NotificationFeedTabsListContainer, NotificationFeedTabsListWrapper, NotificationFeedTabsTitle, } from "./NotificationsFeedTabs.styled";
const NotificationHandler = ({ locale, notification, renderProfile, }) => {
    const NotificationComponent = NotificationComponentByType[notification.type];
    if (!NotificationComponent) {
        return null;
    }
    return (_jsx(NotificationComponent, { notification: notification, locale: locale, renderProfile: renderProfile }));
};
const NoReadNotifications = ({ locale }) => (_jsxs(EmptyViewContainer, { children: [_jsx(HistoryIcon, { sx: { fontSize: "115px" } }), _jsx(EmptyViewTitle, { children: i18n[locale].feed.history.title }), _jsx(EmptyViewDescription, { children: i18n[locale].feed.history.description })] }));
const NoNotifications = ({ locale }) => (_jsxs(EmptyViewContainer, { children: [_jsx(EmptyInboxIcon, { sx: { fontSize: "115px" } }), _jsx(EmptyViewTitle, { children: i18n[locale].feed.empty.title }), _jsx(EmptyViewDescription, { children: i18n[locale].feed.empty.description })] }));
const NotificationFeedTabs = React.memo((props) => {
    const { unreadNotifications, locale, previousNotifications, readNotifications, activeTab, isModal, renderProfile, onChangeTab, } = props;
    const onChangeHandler = useCallback((e, tab) => {
        onChangeTab(e, tab);
    }, [onChangeTab]);
    return (_jsxs(NotificationFeedTabsContainer, { children: [_jsx(NotMobile, { children: _jsx(NotificationFeedTabsHeader, { children: _jsx(NotificationFeedTabsTitle, { children: i18n[locale].feed.title }) }) }), _jsxs(NotificationFeedTabsContent, { children: [_jsxs(Tabs, { value: activeTab, onChange: onChangeHandler, indicatorColor: "primary", children: [_jsx(Tab, { label: i18n[locale].feed.tabs.newest, value: NotificationActiveTab.NEWEST }), _jsx(Tab, { label: i18n[locale].feed.tabs.read, value: NotificationActiveTab.READ })] }), _jsx(NotificationFeedTabsListContainer, { isModal: isModal, children: _jsx(NotificationFeedTabsListWrapper, { children: activeTab === NotificationActiveTab.NEWEST ? (_jsx(_Fragment, { children: !unreadNotifications.length &&
                                    !previousNotifications.length ? (_jsx(NoNotifications, { locale: locale })) : (_jsxs(_Fragment, { children: [_jsx("div", { children: unreadNotifications.map((notification) => (_jsx(NotificationHandler, { notification: notification, locale: locale, renderProfile: renderProfile }, notification.id))) }), previousNotifications.length > 0 && (_jsxs("div", { children: [_jsx(NotificationFeedPrevious, { children: i18n[locale].previous }), previousNotifications.map((notification) => (_jsx(NotificationHandler, { notification: notification, locale: locale, renderProfile: renderProfile }, notification.id)))] }))] })) })) : (_jsx(_Fragment, { children: readNotifications.length > 0 ? (readNotifications.map((notification) => (_jsx(NotificationHandler, { notification: notification, locale: locale, renderProfile: renderProfile }, notification.id)))) : (_jsx(NoReadNotifications, { locale: locale })) })) }) })] })] }));
});
export { NotificationFeedTabs };
//# sourceMappingURL=NotificationsFeedTabs.js.map