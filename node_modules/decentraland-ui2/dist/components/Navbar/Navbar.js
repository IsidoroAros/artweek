import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React, { useCallback, useState } from "react";
import { Toolbar } from "@mui/material";
import { MainMenu } from "./MainMenu/MainMenu";
import { i18nChainSelectorDefault, navbarMainTitlesI18N as i18nNavbarTitlesDefault, navbarSubmenu, } from "./Navbar.defaults";
import { SubMenu } from "./SubMenu/SubMenu";
import { ChainSelector } from "../ChainSelector";
import { Logo } from "../Logo/Logo";
import { TabletAndBelow, useTabletAndBelowMediaQuery } from "../Media";
import { UserMenu } from "../UserMenu";
import { i18n as i18nUserMenuDefault } from "../UserMenu/UserMenu.i18n";
import { AppBarDesktopWrapper, AppBarRightWrapper, AppBarTabletAndBelowWrapper, AppBarWrapper, DclAppBar, LogoLink, MenuIcon, MenuIconBar, MenuModal, } from "./Navbar.styled";
const Navbar = React.memo((props) => {
    const { activePage, chains, chainBeingConfirmed, onSelectChain, selectedChain, isSignedIn, i18nNavbar = i18nNavbarTitlesDefault, i18nUserMenu = i18nUserMenuDefault, i18nChainSelector = i18nChainSelectorDefault, submenuItems = navbarSubmenu, onClickNavbarItem, ...userMenuProps } = props;
    const [toggle, setToggle] = useState(false);
    const [selectedMenu, setSelectedMenu] = useState();
    const [menuMobileOpen, setMenuMobileOpen] = useState(false);
    const isTabletAndBelow = useTabletAndBelowMediaQuery();
    const handleToggle = useCallback((_e, show, section) => {
        setToggle(show);
        setSelectedMenu(show && section);
    }, [setToggle, setSelectedMenu]);
    const handleClickMenu = useCallback((event, options) => {
        onClickNavbarItem && onClickNavbarItem(event, options);
    }, [onClickNavbarItem]);
    const handleMobileToggle = useCallback((_e, show) => {
        if (!show) {
            setToggle(false);
        }
        setMenuMobileOpen(show);
    }, [setToggle, setMenuMobileOpen]);
    const handleUserMenuOpen = useCallback((event, trackingId) => {
        if (userMenuProps.onClickOpen) {
            userMenuProps.onClickOpen(event, trackingId);
        }
        handleMobileToggle(event, false);
    }, [userMenuProps.onClickOpen, handleMobileToggle]);
    return (_jsxs(_Fragment, { children: [_jsx(DclAppBar, { isSubmenuOpen: toggle, isMobileOpen: menuMobileOpen, "aria-label": "navigation bar", children: _jsx(Toolbar, { children: _jsxs(AppBarWrapper, { children: [_jsx(TabletAndBelow, { children: _jsxs(AppBarTabletAndBelowWrapper, { children: [_jsx(LogoLink, { isMobile: true, href: "https://decentraland.org", "aria-label": "Decentraland home", children: _jsx(Logo, {}) }), _jsxs(MenuIcon, { "aria-label": "toggle menu", onClick: (e) => handleMobileToggle(e, !menuMobileOpen), children: [_jsx(MenuIconBar, { isOpen: menuMobileOpen, "aria-label": "menu bar" }), _jsx(MenuIconBar, { isOpen: menuMobileOpen, "aria-label": "menu bar" })] })] }) }), _jsxs(AppBarDesktopWrapper, { children: [_jsx(LogoLink, { href: "https://decentraland.org", "aria-label": "Decentraland home", children: _jsx(Logo, {}) }), _jsx(MainMenu, { activePage: activePage, onToggleShowSubMenu: handleToggle, i18n: i18nNavbar, isMobile: false, "aria-label": "main navigation menu" })] }), _jsxs(AppBarRightWrapper, { children: [isSignedIn &&
                                        onSelectChain &&
                                        chains?.length &&
                                        selectedChain ? (_jsx(ChainSelector, { chains: chains, selectedChain: selectedChain, chainBeingConfirmed: chainBeingConfirmed, i18n: i18nChainSelector, onSelectChain: onSelectChain, "aria-label": "blockchain network selector" })) : null, _jsx(UserMenu, { ...userMenuProps, onClickOpen: isTabletAndBelow
                                            ? handleUserMenuOpen
                                            : userMenuProps.onClickOpen, isSignedIn: isSignedIn, i18n: i18nUserMenu, "aria-label": "user menu" })] })] }) }) }), _jsx(SubMenu, { selectedMenu: selectedMenu, onToggleShowSubMenu: handleToggle, onClickMenuOption: handleClickMenu, submenus: submenuItems, "aria-label": "submenu navigation" }), _jsx(MenuModal, { open: isTabletAndBelow && menuMobileOpen, onClose: (event) => handleMobileToggle(event, false), "aria-label": "mobile menu", children: _jsxs(_Fragment, { children: [_jsx(MainMenu, { activePage: activePage, onToggleShowSubMenu: handleToggle, isOpenOnMobile: menuMobileOpen, i18n: i18nNavbar, isMobile: true, "aria-label": "main mobile navigation menu" }), _jsx(SubMenu, { selectedMenu: selectedMenu, onToggleShowSubMenu: handleToggle, onClickMenuOption: handleClickMenu, isMobile: isTabletAndBelow, submenus: submenuItems, "aria-label": "mobile submenu navigation" })] }) })] }));
});
export { Navbar };
//# sourceMappingURL=Navbar.js.map