import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React, { useCallback, useEffect, useRef, useState } from "react";
import { ChainId, getChainName } from "@dcl/schemas";
import ClearRoundedIcon from "@mui/icons-material/ClearRounded";
import { Modal, Typography } from "@mui/material";
import { IconChain } from "../IconChain/IconChain";
import { useTabletAndBelowMediaQuery } from "../Media";
import { ChainNameIconMap, } from "./ChainSelector.types";
import { ChainButton, ChainSelectorCloseButton, ChainSelectorContainer, ChainSelectorModalTitleContainer, ChainSelectorWrapper, ConfirmLabel, ConnectedLabel, SelectorButton, } from "./ChainSelector.styled";
export const ChainSelector = React.memo((props) => {
    const { chains, selectedChain, chainBeingConfirmed, i18n, onSelectChain } = props;
    const chainBeingConfirmedRef = useRef(chainBeingConfirmed);
    const isMobileOrTablet = useTabletAndBelowMediaQuery();
    // This effect is used to close the modal when the chain being confirmed changes
    useEffect(() => {
        if (selectedChain && selectedChain === chainBeingConfirmedRef.current) {
            chainBeingConfirmedRef.current = undefined;
            setShowModal(false);
        }
    }, [selectedChain]);
    const [showModal, setShowModal] = useState(false);
    const title = i18n?.title || "Select Network";
    const onButtonClick = useCallback(() => {
        setShowModal(!showModal);
    }, []);
    const onSelectChainHandler = useCallback((chainId) => {
        onSelectChain(chainId);
        chainBeingConfirmedRef.current = chainId;
    }, []);
    return (_jsxs(_Fragment, { children: [_jsx(SelectorButton, { variant: "contained", color: "secondary", startIcon: _jsx(IconChain, { icon: ChainNameIconMap[selectedChain] }), onClick: onButtonClick, children: !isMobileOrTablet
                    ? selectedChain === ChainId.ETHEREUM_MAINNET
                        ? "Ethereum"
                        : getChainName(selectedChain)
                    : null }), _jsx(Modal, { open: showModal, onClose: () => setShowModal(false), children: _jsxs(ChainSelectorContainer, { elevation: 1, children: [_jsxs(ChainSelectorModalTitleContainer, { children: [title && _jsx(Typography, { variant: "h5", children: title }), _jsx(ChainSelectorCloseButton, { "aria-label": "close", size: "large", onClick: () => setShowModal(false), children: _jsx(ClearRoundedIcon, {}) })] }), _jsx(ChainSelectorWrapper, { children: chains.map((chain) => {
                                const chainName = chain === ChainId.ETHEREUM_MAINNET
                                    ? "Ethereum"
                                    : getChainName(chain);
                                return (_jsxs(ChainButton, { variant: "text", color: "secondary", startIcon: _jsx(IconChain, { icon: ChainNameIconMap[chain] }), onClick: () => onSelectChainHandler(chain), isSelected: selectedChain === chain, children: [chainName, selectedChain === chain ? (_jsx(ConnectedLabel, { children: i18n.connected })) : chainBeingConfirmed && chain === chainBeingConfirmed ? (_jsx(ConfirmLabel, { children: i18n.confirmInWallet })) : null] }, chain));
                            }) })] }) })] }));
});
//# sourceMappingURL=ChainSelector.js.map