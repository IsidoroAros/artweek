import { ManaProps } from "./Mana.types";
interface StyledManaButtonProps extends Pick<ManaProps, "inline" | "href" | "onClick"> {
    fontSize?: string;
}
interface StyledImageContainerProps {
    primary?: boolean;
    color?: string;
}
declare const ManaButtonContainer: import("@emotion/styled").StyledComponent<import("@mui/material").ButtonBaseOwnProps & Omit<import("@mui/material").ButtonBaseOwnProps, "classes"> & import("@mui/material/OverridableComponent").CommonProps & Omit<Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
}, "disabled" | "className" | "style" | "classes" | "children" | "sx" | "tabIndex" | "action" | "centerRipple" | "disableRipple" | "disableTouchRipple" | "focusRipple" | "focusVisibleClassName" | "LinkComponent" | "onFocusVisible" | "TouchRippleProps" | "touchRippleRef"> & {
    theme?: import("@emotion/react").Theme;
} & StyledManaButtonProps, {}, {}>;
declare const ImageContainer: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: import("react").ElementType;
} & StyledImageContainerProps, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export { ImageContainer, ManaButtonContainer };
